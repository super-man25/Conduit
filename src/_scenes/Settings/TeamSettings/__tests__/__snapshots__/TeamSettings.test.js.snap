// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TeamSettings /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TeamSettings
    clientActions={
      Object {
        "fetch": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "update": [MockFunction],
      }
    }
    clientState={
      Object {
        "id": 1,
        "name": "New York Mets",
        "pricingInterval": 15,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <ForwardRef
        padding="2rem"
      >
        <ForwardRef>
          <ForwardRef
            margin="2rem 0"
          >
            <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/team",
                    "title": "Team Settings",
                  },
                ]
              }
            />
          </ForwardRef>
          <ForwardRef
            type="secondary"
          >
            Team Settings
          </ForwardRef>
          <ForwardRef
            weight="300"
          >
            <i>
              Team Information and settings
            </i>
          </ForwardRef>
          <TeamInfo
            fetch={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
            id={1}
            name="New York Mets"
            pricingInterval={15}
            update={[MockFunction]}
          />
          <Connect(TeamIntegrationsContainer) />
        </ForwardRef>
      </ForwardRef>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef>
          <ForwardRef
            margin="2rem 0"
          >
            <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/team",
                    "title": "Team Settings",
                  },
                ]
              }
            />
          </ForwardRef>
          <ForwardRef
            type="secondary"
          >
            Team Settings
          </ForwardRef>
          <ForwardRef
            weight="300"
          >
            <i>
              Team Information and settings
            </i>
          </ForwardRef>
          <TeamInfo
            fetch={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
            id={1}
            name="New York Mets"
            pricingInterval={15}
            update={[MockFunction]}
          />
          <Connect(TeamIntegrationsContainer) />
        </ForwardRef>,
        "padding": "2rem",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              margin="2rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/team",
                      "title": "Team Settings",
                    },
                  ]
                }
              />
            </ForwardRef>,
            <ForwardRef
              type="secondary"
            >
              Team Settings
            </ForwardRef>,
            <ForwardRef
              weight="300"
            >
              <i>
                Team Information and settings
              </i>
            </ForwardRef>,
            <TeamInfo
              fetch={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              id={1}
              name="New York Mets"
              pricingInterval={15}
              update={[MockFunction]}
            />,
            <Connect(TeamIntegrationsContainer) />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/team",
                      "title": "Team Settings",
                    },
                  ]
                }
              />,
              "margin": "2rem 0",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "crumbs": Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/team",
                    "title": "Team Settings",
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ksYbfQ",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ksYbfQ",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Team Settings",
              "type": "secondary",
            },
            "ref": null,
            "rendered": "Team Settings",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [
                [Function],
              ],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jTzLTM",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  "
  font-size: ",
                  [Function],
                  ";
  font-weight: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.h3",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jTzLTM",
              "target": "h3",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <i>
                Team Information and settings
              </i>,
              "weight": "300",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Team Information and settings",
              },
              "ref": null,
              "rendered": "Team Information and settings",
              "type": "i",
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-chPdSV",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  ";
  font-size: ",
                  [Function],
                  ";
  font-weight: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-chPdSV",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "fetch": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
              "id": 1,
              "name": "New York Mets",
              "pricingInterval": 15,
              "update": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-emmjRN",
            "isStatic": false,
            "rules": Array [
              "
  display: ",
              [Function],
              ";
  flex: ",
              [Function],
              ";
  flex-direction: ",
              [Function],
              "
  flex-grow: ",
              [Function],
              ";
  flex-shrink: ",
              [Function],
              ";
  flex-basis: ",
              [Function],
              ";
  flex-wrap: ",
              [Function],
              ";
  order: ",
              [Function],
              ";
  justify-content: ",
              [Function],
              ";
  align-items: ",
              [Function],
              ";
  align-content: ",
              [Function],
              ";
  align-self: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
              "
  flex-direction: column;
  justify-content: left;
  min-width: 100%;
",
            ],
          },
          "displayName": "Styled(Flex)",
          "foldedComponentIds": Array [
            "sc-eNQAEJ",
            "sc-hMqMXs",
          ],
          "render": [Function],
          "styledComponentId": "sc-emmjRN",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-hrWEMg",
          "isStatic": false,
          "rules": Array [
            "
  display: flex;
  background-color: ",
            "#F8F8F8",
            ";
  overflow-y: ",
            [Function],
            ";
  flex: 1;
  padding: ",
            [Function],
            ";
  margin: ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-hrWEMg",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bwCtUz",
        "isStatic": true,
        "rules": Array [
          "
  height: 100%;
  width: 100%;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bwCtUz",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef
          padding="2rem"
        >
          <ForwardRef>
            <ForwardRef
              margin="2rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/team",
                      "title": "Team Settings",
                    },
                  ]
                }
              />
            </ForwardRef>
            <ForwardRef
              type="secondary"
            >
              Team Settings
            </ForwardRef>
            <ForwardRef
              weight="300"
            >
              <i>
                Team Information and settings
              </i>
            </ForwardRef>
            <TeamInfo
              fetch={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              id={1}
              name="New York Mets"
              pricingInterval={15}
              update={[MockFunction]}
            />
            <Connect(TeamIntegrationsContainer) />
          </ForwardRef>
        </ForwardRef>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ForwardRef>
            <ForwardRef
              margin="2rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/team",
                      "title": "Team Settings",
                    },
                  ]
                }
              />
            </ForwardRef>
            <ForwardRef
              type="secondary"
            >
              Team Settings
            </ForwardRef>
            <ForwardRef
              weight="300"
            >
              <i>
                Team Information and settings
              </i>
            </ForwardRef>
            <TeamInfo
              fetch={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              id={1}
              name="New York Mets"
              pricingInterval={15}
              update={[MockFunction]}
            />
            <Connect(TeamIntegrationsContainer) />
          </ForwardRef>,
          "padding": "2rem",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                margin="2rem 0"
              >
                <Breadcrumbs
                  crumbs={
                    Array [
                      Object {
                        "path": "/dashboard",
                        "title": "Dashboard",
                      },
                      Object {
                        "path": "/settings/team",
                        "title": "Team Settings",
                      },
                    ]
                  }
                />
              </ForwardRef>,
              <ForwardRef
                type="secondary"
              >
                Team Settings
              </ForwardRef>,
              <ForwardRef
                weight="300"
              >
                <i>
                  Team Information and settings
                </i>
              </ForwardRef>,
              <TeamInfo
                fetch={
                  [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
                id={1}
                name="New York Mets"
                pricingInterval={15}
                update={[MockFunction]}
              />,
              <Connect(TeamIntegrationsContainer) />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Breadcrumbs
                  crumbs={
                    Array [
                      Object {
                        "path": "/dashboard",
                        "title": "Dashboard",
                      },
                      Object {
                        "path": "/settings/team",
                        "title": "Team Settings",
                      },
                    ]
                  }
                />,
                "margin": "2rem 0",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "crumbs": Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/team",
                      "title": "Team Settings",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ksYbfQ",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ksYbfQ",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Team Settings",
                "type": "secondary",
              },
              "ref": null,
              "rendered": "Team Settings",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jTzLTM",
                  "isStatic": false,
                  "rules": Array [
                    "
  color: ",
                    [Function],
                    "
  font-size: ",
                    [Function],
                    ";
  font-weight: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.h3",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jTzLTM",
                "target": "h3",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <i>
                  Team Information and settings
                </i>,
                "weight": "300",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Team Information and settings",
                },
                "ref": null,
                "rendered": "Team Information and settings",
                "type": "i",
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-chPdSV",
                  "isStatic": false,
                  "rules": Array [
                    "
  color: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-chPdSV",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "fetch": [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                },
                "id": 1,
                "name": "New York Mets",
                "pricingInterval": 15,
                "update": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-emmjRN",
              "isStatic": false,
              "rules": Array [
                "
  display: ",
                [Function],
                ";
  flex: ",
                [Function],
                ";
  flex-direction: ",
                [Function],
                "
  flex-grow: ",
                [Function],
                ";
  flex-shrink: ",
                [Function],
                ";
  flex-basis: ",
                [Function],
                ";
  flex-wrap: ",
                [Function],
                ";
  order: ",
                [Function],
                ";
  justify-content: ",
                [Function],
                ";
  align-items: ",
                [Function],
                ";
  align-content: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
                "
  flex-direction: column;
  justify-content: left;
  min-width: 100%;
",
              ],
            },
            "displayName": "Styled(Flex)",
            "foldedComponentIds": Array [
              "sc-eNQAEJ",
              "sc-hMqMXs",
            ],
            "render": [Function],
            "styledComponentId": "sc-emmjRN",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-hrWEMg",
            "isStatic": false,
            "rules": Array [
              "
  display: flex;
  background-color: ",
              "#F8F8F8",
              ";
  overflow-y: ",
              [Function],
              ";
  flex: 1;
  padding: ",
              [Function],
              ";
  margin: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-hrWEMg",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwCtUz",
          "isStatic": true,
          "rules": Array [
            "
  height: 100%;
  width: 100%;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwCtUz",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
