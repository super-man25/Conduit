// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Users /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UsersPresenter
    fetchUserList={[MockFunction]}
    reset={[MockFunction]}
    userList={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Flex
        direction="column"
        height="100%"
        max-width="100%"
        padding="2rem"
      >
        <styled.div
          margin="2rem 0"
        >
          <Breadcrumbs
            crumbs={
              Array [
                Object {
                  "path": "/dashboard",
                  "title": "Dashboard",
                },
                Object {
                  "path": "/settings/users",
                  "title": "View Users",
                },
              ]
            }
          />
        </styled.div>
        <styled.h3
          type="secondary"
        >
          View Users
        </styled.h3>
        <UsersTable
          fetchUserList={[MockFunction]}
          reset={[MockFunction]}
          userList={Array []}
        />
      </Flex>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div
            margin="2rem 0"
          >
            <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ]
              }
            />
          </styled.div>,
          <styled.h3
            type="secondary"
          >
            View Users
          </styled.h3>,
          <UsersTable
            fetchUserList={[MockFunction]}
            reset={[MockFunction]}
            userList={Array []}
          />,
        ],
        "direction": "column",
        "height": "100%",
        "max-width": "100%",
        "padding": "2rem",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ]
              }
            />,
            "margin": "2rem 0",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "crumbs": Array [
                Object {
                  "path": "/dashboard",
                  "title": "Dashboard",
                },
                Object {
                  "path": "/settings/users",
                  "title": "View Users",
                },
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "View Users",
            "type": "secondary",
          },
          "ref": null,
          "rendered": "View Users",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "fetchUserList": [MockFunction],
            "reset": [MockFunction],
            "userList": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Flex
          direction="column"
          height="100%"
          max-width="100%"
          padding="2rem"
        >
          <styled.div
            margin="2rem 0"
          >
            <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ]
              }
            />
          </styled.div>
          <styled.h3
            type="secondary"
          >
            View Users
          </styled.h3>
          <UsersTable
            fetchUserList={[MockFunction]}
            reset={[MockFunction]}
            userList={Array []}
          />
        </Flex>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div
              margin="2rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/users",
                      "title": "View Users",
                    },
                  ]
                }
              />
            </styled.div>,
            <styled.h3
              type="secondary"
            >
              View Users
            </styled.h3>,
            <UsersTable
              fetchUserList={[MockFunction]}
              reset={[MockFunction]}
              userList={Array []}
            />,
          ],
          "direction": "column",
          "height": "100%",
          "max-width": "100%",
          "padding": "2rem",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/users",
                      "title": "View Users",
                    },
                  ]
                }
              />,
              "margin": "2rem 0",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "crumbs": Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "View Users",
              "type": "secondary",
            },
            "ref": null,
            "rendered": "View Users",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "fetchUserList": [MockFunction],
              "reset": [MockFunction],
              "userList": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
