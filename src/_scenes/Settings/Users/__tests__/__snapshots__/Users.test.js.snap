// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Users /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UsersPresenter
    fetchUserList={[MockFunction]}
    reset={[MockFunction]}
    userList={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <ForwardRef
        direction="column"
        height="100%"
        max-width="100%"
        padding="2rem"
      >
        <ForwardRef
          margin="2rem 0"
        >
          <Breadcrumbs
            crumbs={
              Array [
                Object {
                  "path": "/dashboard",
                  "title": "Dashboard",
                },
                Object {
                  "path": "/settings/users",
                  "title": "View Users",
                },
              ]
            }
          />
        </ForwardRef>
        <ForwardRef
          type="secondary"
        >
          View Users
        </ForwardRef>
        <UsersTable
          fetchUserList={[MockFunction]}
          reset={[MockFunction]}
          userList={Array []}
        />
      </ForwardRef>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            margin="2rem 0"
          >
            <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ]
              }
            />
          </ForwardRef>,
          <ForwardRef
            type="secondary"
          >
            View Users
          </ForwardRef>,
          <UsersTable
            fetchUserList={[MockFunction]}
            reset={[MockFunction]}
            userList={Array []}
          />,
        ],
        "direction": "column",
        "height": "100%",
        "max-width": "100%",
        "padding": "2rem",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ]
              }
            />,
            "margin": "2rem 0",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "crumbs": Array [
                Object {
                  "path": "/dashboard",
                  "title": "Dashboard",
                },
                Object {
                  "path": "/settings/users",
                  "title": "View Users",
                },
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ksYbfQ",
              "isStatic": false,
              "rules": Array [
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ksYbfQ",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "View Users",
            "type": "secondary",
          },
          "ref": null,
          "rendered": "View Users",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jTzLTM",
              "isStatic": false,
              "rules": Array [
                "
  color: ",
                [Function],
                "
  font-size: ",
                [Function],
                ";
  font-weight: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.h3",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jTzLTM",
            "target": "h3",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "fetchUserList": [MockFunction],
            "reset": [MockFunction],
            "userList": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-hMqMXs",
          "isStatic": false,
          "rules": Array [
            "
  display: ",
            [Function],
            ";
  flex: ",
            [Function],
            ";
  flex-direction: ",
            [Function],
            "
  flex-grow: ",
            [Function],
            ";
  flex-shrink: ",
            [Function],
            ";
  flex-basis: ",
            [Function],
            ";
  flex-wrap: ",
            [Function],
            ";
  order: ",
            [Function],
            ";
  justify-content: ",
            [Function],
            ";
  align-items: ",
            [Function],
            ";
  align-content: ",
            [Function],
            ";
  align-self: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
  width: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Flex",
        "foldedComponentIds": Array [
          "sc-eNQAEJ",
        ],
        "render": [Function],
        "styledComponentId": "sc-hMqMXs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bwCtUz",
        "isStatic": true,
        "rules": Array [
          "
  height: 100%;
  width: 100%;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bwCtUz",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef
          direction="column"
          height="100%"
          max-width="100%"
          padding="2rem"
        >
          <ForwardRef
            margin="2rem 0"
          >
            <Breadcrumbs
              crumbs={
                Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ]
              }
            />
          </ForwardRef>
          <ForwardRef
            type="secondary"
          >
            View Users
          </ForwardRef>
          <UsersTable
            fetchUserList={[MockFunction]}
            reset={[MockFunction]}
            userList={Array []}
          />
        </ForwardRef>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              margin="2rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/users",
                      "title": "View Users",
                    },
                  ]
                }
              />
            </ForwardRef>,
            <ForwardRef
              type="secondary"
            >
              View Users
            </ForwardRef>,
            <UsersTable
              fetchUserList={[MockFunction]}
              reset={[MockFunction]}
              userList={Array []}
            />,
          ],
          "direction": "column",
          "height": "100%",
          "max-width": "100%",
          "padding": "2rem",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/settings/users",
                      "title": "View Users",
                    },
                  ]
                }
              />,
              "margin": "2rem 0",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "crumbs": Array [
                  Object {
                    "path": "/dashboard",
                    "title": "Dashboard",
                  },
                  Object {
                    "path": "/settings/users",
                    "title": "View Users",
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ksYbfQ",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ksYbfQ",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "View Users",
              "type": "secondary",
            },
            "ref": null,
            "rendered": "View Users",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [
                [Function],
              ],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jTzLTM",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  "
  font-size: ",
                  [Function],
                  ";
  font-weight: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.h3",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jTzLTM",
              "target": "h3",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "fetchUserList": [MockFunction],
              "reset": [MockFunction],
              "userList": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-hMqMXs",
            "isStatic": false,
            "rules": Array [
              "
  display: ",
              [Function],
              ";
  flex: ",
              [Function],
              ";
  flex-direction: ",
              [Function],
              "
  flex-grow: ",
              [Function],
              ";
  flex-shrink: ",
              [Function],
              ";
  flex-basis: ",
              [Function],
              ";
  flex-wrap: ",
              [Function],
              ";
  order: ",
              [Function],
              ";
  justify-content: ",
              [Function],
              ";
  align-items: ",
              [Function],
              ";
  align-content: ",
              [Function],
              ";
  align-self: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Flex",
          "foldedComponentIds": Array [
            "sc-eNQAEJ",
          ],
          "render": [Function],
          "styledComponentId": "sc-hMqMXs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwCtUz",
          "isStatic": true,
          "rules": Array [
            "
  height: 100%;
  width: 100%;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwCtUz",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
