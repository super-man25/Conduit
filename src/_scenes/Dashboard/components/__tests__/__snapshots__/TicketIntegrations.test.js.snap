// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TicketIntegrations /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TicketIntegrations
    fetchTicketIntegrations={[MockFunction]}
    loading={false}
    ticketIntegrations={
      Array [
        Object {
          "id": 1,
          "isActive": true,
          "logoUrl": "#",
          "name": "Some Name",
          "sold": 1000,
          "total": 1000,
        },
        Object {
          "id": 2,
          "isActive": true,
          "logoUrl": "#",
          "name": "Some Name",
          "sold": 1000,
          "total": 1000,
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <PanelHeader>
          <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>
          </Flex>
        </PanelHeader>,
        <styled.section>
          <styled.div>
            <TicketIntegrationListItem
              integration={
                Object {
                  "id": 1,
                  "isActive": true,
                  "logoUrl": "#",
                  "name": "Some Name",
                  "sold": 1000,
                  "total": 1000,
                }
              }
              integrations={
                Array [
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                ]
              }
            />
            <TicketIntegrationListItem
              integration={
                Object {
                  "id": 2,
                  "isActive": true,
                  "logoUrl": "#",
                  "name": "Some Name",
                  "sold": 1000,
                  "total": 1000,
                }
              }
              integrations={
                Array [
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                ]
              }
            />
          </styled.div>
        </styled.section>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>
          </Flex>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "center",
            "children": <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>,
            "height": "100%",
            "justify": "space-between",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>,
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Integrations",
                    "margin": "0",
                    "marginRight": "2.5rem",
                  },
                  "ref": null,
                  "rendered": "Integrations",
                  "type": [Function],
                },
                "type": [Function],
              },
              undefined,
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <styled.div>
            <TicketIntegrationListItem
              integration={
                Object {
                  "id": 1,
                  "isActive": true,
                  "logoUrl": "#",
                  "name": "Some Name",
                  "sold": 1000,
                  "total": 1000,
                }
              }
              integrations={
                Array [
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                ]
              }
            />
            <TicketIntegrationListItem
              integration={
                Object {
                  "id": 2,
                  "isActive": true,
                  "logoUrl": "#",
                  "name": "Some Name",
                  "sold": 1000,
                  "total": 1000,
                }
              }
              integrations={
                Array [
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                ]
              }
            />
          </styled.div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <TicketIntegrationListItem
                integration={
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  }
                }
                integrations={
                  Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ]
                }
              />,
              <TicketIntegrationListItem
                integration={
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  }
                }
                integrations={
                  Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ]
                }
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "function",
              "props": Object {
                "integration": Object {
                  "id": 1,
                  "isActive": true,
                  "logoUrl": "#",
                  "name": "Some Name",
                  "sold": 1000,
                  "total": 1000,
                },
                "integrations": Array [
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "function",
              "props": Object {
                "integration": Object {
                  "id": 2,
                  "isActive": true,
                  "logoUrl": "#",
                  "name": "Some Name",
                  "sold": 1000,
                  "total": 1000,
                },
                "integrations": Array [
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PanelHeader>
            <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>
            </Flex>
          </PanelHeader>,
          <styled.section>
            <styled.div>
              <TicketIntegrationListItem
                integration={
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  }
                }
                integrations={
                  Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ]
                }
              />
              <TicketIntegrationListItem
                integration={
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  }
                }
                integrations={
                  Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ]
                }
              />
            </styled.div>
          </styled.section>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>
            </Flex>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>,
              "height": "100%",
              "justify": "space-between",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Flex>
                    <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Integrations
                    </styled.h4>
                  </Flex>,
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Integrations
                    </styled.h4>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Integrations",
                      "margin": "0",
                      "marginRight": "2.5rem",
                    },
                    "ref": null,
                    "rendered": "Integrations",
                    "type": [Function],
                  },
                  "type": [Function],
                },
                undefined,
              ],
              "type": Symbol(react.fragment),
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <styled.div>
              <TicketIntegrationListItem
                integration={
                  Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  }
                }
                integrations={
                  Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ]
                }
              />
              <TicketIntegrationListItem
                integration={
                  Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  }
                }
                integrations={
                  Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ]
                }
              />
            </styled.div>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <TicketIntegrationListItem
                  integration={
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    }
                  }
                  integrations={
                    Array [
                      Object {
                        "id": 1,
                        "isActive": true,
                        "logoUrl": "#",
                        "name": "Some Name",
                        "sold": 1000,
                        "total": 1000,
                      },
                      Object {
                        "id": 2,
                        "isActive": true,
                        "logoUrl": "#",
                        "name": "Some Name",
                        "sold": 1000,
                        "total": 1000,
                      },
                    ]
                  }
                />,
                <TicketIntegrationListItem
                  integration={
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    }
                  }
                  integrations={
                    Array [
                      Object {
                        "id": 1,
                        "isActive": true,
                        "logoUrl": "#",
                        "name": "Some Name",
                        "sold": 1000,
                        "total": 1000,
                      },
                      Object {
                        "id": 2,
                        "isActive": true,
                        "logoUrl": "#",
                        "name": "Some Name",
                        "sold": 1000,
                        "total": 1000,
                      },
                    ]
                  }
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "function",
                "props": Object {
                  "integration": Object {
                    "id": 1,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  "integrations": Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "2",
                "nodeType": "function",
                "props": Object {
                  "integration": Object {
                    "id": 2,
                    "isActive": true,
                    "logoUrl": "#",
                    "name": "Some Name",
                    "sold": 1000,
                    "total": 1000,
                  },
                  "integrations": Array [
                    Object {
                      "id": 1,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                    Object {
                      "id": 2,
                      "isActive": true,
                      "logoUrl": "#",
                      "name": "Some Name",
                      "sold": 1000,
                      "total": 1000,
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TicketIntegrations /> should render correctly when an error occurs 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TicketIntegrations
    error="Error"
    fetchTicketIntegrations={[MockFunction]}
    loading={false}
    ticketIntegrations={
      Array [
        Object {
          "id": 1,
          "isActive": true,
          "logoUrl": "#",
          "name": "Some Name",
          "sold": 1000,
          "total": 1000,
        },
        Object {
          "id": 2,
          "isActive": true,
          "logoUrl": "#",
          "name": "Some Name",
          "sold": 1000,
          "total": 1000,
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <PanelHeader>
          <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>
          </Flex>
        </PanelHeader>,
        <styled.section>
          <RenderError />
        </styled.section>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>
          </Flex>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "center",
            "children": <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>,
            "height": "100%",
            "justify": "space-between",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>,
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Integrations",
                    "margin": "0",
                    "marginRight": "2.5rem",
                  },
                  "ref": null,
                  "rendered": "Integrations",
                  "type": [Function],
                },
                "type": [Function],
              },
              undefined,
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <RenderError />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PanelHeader>
            <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>
            </Flex>
          </PanelHeader>,
          <styled.section>
            <RenderError />
          </styled.section>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>
            </Flex>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>,
              "height": "100%",
              "justify": "space-between",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Flex>
                    <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Integrations
                    </styled.h4>
                  </Flex>,
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Integrations
                    </styled.h4>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Integrations",
                      "margin": "0",
                      "marginRight": "2.5rem",
                    },
                    "ref": null,
                    "rendered": "Integrations",
                    "type": [Function],
                  },
                  "type": [Function],
                },
                undefined,
              ],
              "type": Symbol(react.fragment),
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <RenderError />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TicketIntegrations /> should render correctly when loading is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TicketIntegrations
    fetchTicketIntegrations={[MockFunction]}
    loading={true}
    ticketIntegrations={
      Array [
        Object {
          "id": 1,
          "isActive": true,
          "logoUrl": "#",
          "name": "Some Name",
          "sold": 1000,
          "total": 1000,
        },
        Object {
          "id": 2,
          "isActive": true,
          "logoUrl": "#",
          "name": "Some Name",
          "sold": 1000,
          "total": 1000,
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <PanelHeader>
          <Flex
            align="center"
            height="100%"
            justify="space-between"
          />
        </PanelHeader>,
        <styled.section>
          <Loader />
        </styled.section>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Flex
            align="center"
            height="100%"
            justify="space-between"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "center",
            "children": false,
            "height": "100%",
            "justify": "space-between",
          },
          "ref": null,
          "rendered": false,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Loader />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PanelHeader>
            <Flex
              align="center"
              height="100%"
              justify="space-between"
            />
          </PanelHeader>,
          <styled.section>
            <Loader />
          </styled.section>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Flex
              align="center"
              height="100%"
              justify="space-between"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": false,
              "height": "100%",
              "justify": "space-between",
            },
            "ref": null,
            "rendered": false,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Loader />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TicketIntegrations /> should render correctly when no data is found 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TicketIntegrations
    fetchTicketIntegrations={[MockFunction]}
    loading={false}
    ticketIntegrations={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <PanelHeader>
          <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>
          </Flex>
        </PanelHeader>,
        <styled.section>
          <NoData />
        </styled.section>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>
          </Flex>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "center",
            "children": <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Integrations
                </styled.h4>
              </Flex>
            </React.Fragment>,
            "height": "100%",
            "justify": "space-between",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>,
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Integrations",
                    "margin": "0",
                    "marginRight": "2.5rem",
                  },
                  "ref": null,
                  "rendered": "Integrations",
                  "type": [Function],
                },
                "type": [Function],
              },
              undefined,
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <NoData />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PanelHeader>
            <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>
            </Flex>
          </PanelHeader>,
          <styled.section>
            <NoData />
          </styled.section>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>
            </Flex>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Integrations
                  </styled.h4>
                </Flex>
              </React.Fragment>,
              "height": "100%",
              "justify": "space-between",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Flex>
                    <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Integrations
                    </styled.h4>
                  </Flex>,
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Integrations
                    </styled.h4>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Integrations",
                      "margin": "0",
                      "marginRight": "2.5rem",
                    },
                    "ref": null,
                    "rendered": "Integrations",
                    "type": [Function],
                  },
                  "type": [Function],
                },
                undefined,
              ],
              "type": Symbol(react.fragment),
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <NoData />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
