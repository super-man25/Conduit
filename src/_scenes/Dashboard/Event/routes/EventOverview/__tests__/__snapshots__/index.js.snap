// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EventOverview /> index route should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EventOverview
    event={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <styled.div
        padding="1.5rem 2rem"
      >
        <Connect(withSidebarEventHeader)
          availableInventory={15000}
          totalInventory={40000}
        />
        <styled.div
          height="1rem"
        />
        <Connect(EventChart)
          event={Object {}}
        />
        <styled.div
          height="2rem"
        />
        <Connect(TicketIntegrationsPresenter) />
        <styled.div
          height="2rem"
        />
      </styled.div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Connect(withSidebarEventHeader)
            availableInventory={15000}
            totalInventory={40000}
          />,
          <styled.div
            height="1rem"
          />,
          <Connect(EventChart)
            event={Object {}}
          />,
          <styled.div
            height="2rem"
          />,
          <Connect(TicketIntegrationsPresenter) />,
          <styled.div
            height="2rem"
          />,
          undefined,
        ],
        "padding": "1.5rem 2rem",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "availableInventory": 15000,
            "totalInventory": 40000,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "height": "1rem",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "event": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "height": "2rem",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "height": "2rem",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <styled.div
          padding="1.5rem 2rem"
        >
          <Connect(withSidebarEventHeader)
            availableInventory={15000}
            totalInventory={40000}
          />
          <styled.div
            height="1rem"
          />
          <Connect(EventChart)
            event={Object {}}
          />
          <styled.div
            height="2rem"
          />
          <Connect(TicketIntegrationsPresenter) />
          <styled.div
            height="2rem"
          />
        </styled.div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Connect(withSidebarEventHeader)
              availableInventory={15000}
              totalInventory={40000}
            />,
            <styled.div
              height="1rem"
            />,
            <Connect(EventChart)
              event={Object {}}
            />,
            <styled.div
              height="2rem"
            />,
            <Connect(TicketIntegrationsPresenter) />,
            <styled.div
              height="2rem"
            />,
            undefined,
          ],
          "padding": "1.5rem 2rem",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "availableInventory": 15000,
              "totalInventory": 40000,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "height": "1rem",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "event": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "height": "2rem",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "height": "2rem",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          undefined,
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
