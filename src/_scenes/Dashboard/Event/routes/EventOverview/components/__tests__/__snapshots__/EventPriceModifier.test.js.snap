// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EventPriceModifierPresenter /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EventPriceModifierPresenter
    event={
      Object {
        "id": 1,
        "percentPriceModifier": 10,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <ApiAlertPresenter
          alertState={
            Object {
              "message": null,
              "type": null,
            }
          }
        />,
        <PanelHeader>
          <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Pricing
                </styled.h4>
                <Toggle
                  onChange={[Function]}
                  size="small"
                  title="Enable pricing"
                />
              </Flex>
            </React.Fragment>
            <styled.div
              onClick={[Function]}
              size="medium"
              type="primary"
              weight="normal"
            >
              EDIT
            </styled.div>
          </Flex>
        </PanelHeader>,
        <PanelContent>
          <styled.p
            size={22}
          >
            10
            % 
            increase
          </styled.p>
        </PanelContent>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "alertState": Object {
            "message": null,
            "type": null,
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Flex
            align="center"
            height="100%"
            justify="space-between"
          >
            <React.Fragment>
              <Flex>
                <styled.h4
                  margin="0"
                  marginRight="2.5rem"
                >
                  Pricing
                </styled.h4>
                <Toggle
                  onChange={[Function]}
                  size="small"
                  title="Enable pricing"
                />
              </Flex>
            </React.Fragment>
            <styled.div
              onClick={[Function]}
              size="medium"
              type="primary"
              weight="normal"
            >
              EDIT
            </styled.div>
          </Flex>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "center",
            "children": Array [
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Pricing
                  </styled.h4>
                  <Toggle
                    onChange={[Function]}
                    size="small"
                    title="Enable pricing"
                  />
                </Flex>
              </React.Fragment>,
              <styled.div
                onClick={[Function]}
                size="medium"
                type="primary"
                weight="normal"
              >
                EDIT
              </styled.div>,
            ],
            "height": "100%",
            "justify": "space-between",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Pricing
                  </styled.h4>
                  <Toggle
                    onChange={[Function]}
                    size="small"
                    title="Enable pricing"
                  />
                </Flex>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Pricing
                    </styled.h4>,
                    <Toggle
                      onChange={[Function]}
                      size="small"
                      title="Enable pricing"
                    />,
                    undefined,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Pricing",
                      "margin": "0",
                      "marginRight": "2.5rem",
                    },
                    "ref": null,
                    "rendered": "Pricing",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "isChecked": undefined,
                      "isDisabled": undefined,
                      "onChange": [Function],
                      "size": "small",
                      "title": "Enable pricing",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  undefined,
                ],
                "type": [Function],
              },
              "type": Symbol(react.fragment),
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "EDIT",
                "onClick": [Function],
                "size": "medium",
                "type": "primary",
                "weight": "normal",
              },
              "ref": null,
              "rendered": "EDIT",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <styled.p
            size={22}
          >
            10
            % 
            increase
          </styled.p>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              10,
              "% ",
              "increase",
            ],
            "size": 22,
          },
          "ref": null,
          "rendered": Array [
            10,
            "% ",
            "increase",
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ApiAlertPresenter
            alertState={
              Object {
                "message": null,
                "type": null,
              }
            }
          />,
          <PanelHeader>
            <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Pricing
                  </styled.h4>
                  <Toggle
                    onChange={[Function]}
                    size="small"
                    title="Enable pricing"
                  />
                </Flex>
              </React.Fragment>
              <styled.div
                onClick={[Function]}
                size="medium"
                type="primary"
                weight="normal"
              >
                EDIT
              </styled.div>
            </Flex>
          </PanelHeader>,
          <PanelContent>
            <styled.p
              size={22}
            >
              10
              % 
              increase
            </styled.p>
          </PanelContent>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "alertState": Object {
              "message": null,
              "type": null,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Flex
              align="center"
              height="100%"
              justify="space-between"
            >
              <React.Fragment>
                <Flex>
                  <styled.h4
                    margin="0"
                    marginRight="2.5rem"
                  >
                    Pricing
                  </styled.h4>
                  <Toggle
                    onChange={[Function]}
                    size="small"
                    title="Enable pricing"
                  />
                </Flex>
              </React.Fragment>
              <styled.div
                onClick={[Function]}
                size="medium"
                type="primary"
                weight="normal"
              >
                EDIT
              </styled.div>
            </Flex>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": Array [
                <React.Fragment>
                  <Flex>
                    <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Pricing
                    </styled.h4>
                    <Toggle
                      onChange={[Function]}
                      size="small"
                      title="Enable pricing"
                    />
                  </Flex>
                </React.Fragment>,
                <styled.div
                  onClick={[Function]}
                  size="medium"
                  type="primary"
                  weight="normal"
                >
                  EDIT
                </styled.div>,
              ],
              "height": "100%",
              "justify": "space-between",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Flex>
                    <styled.h4
                      margin="0"
                      marginRight="2.5rem"
                    >
                      Pricing
                    </styled.h4>
                    <Toggle
                      onChange={[Function]}
                      size="small"
                      title="Enable pricing"
                    />
                  </Flex>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <styled.h4
                        margin="0"
                        marginRight="2.5rem"
                      >
                        Pricing
                      </styled.h4>,
                      <Toggle
                        onChange={[Function]}
                        size="small"
                        title="Enable pricing"
                      />,
                      undefined,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Pricing",
                        "margin": "0",
                        "marginRight": "2.5rem",
                      },
                      "ref": null,
                      "rendered": "Pricing",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "isChecked": undefined,
                        "isDisabled": undefined,
                        "onChange": [Function],
                        "size": "small",
                        "title": "Enable pricing",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    undefined,
                  ],
                  "type": [Function],
                },
                "type": Symbol(react.fragment),
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "EDIT",
                  "onClick": [Function],
                  "size": "medium",
                  "type": "primary",
                  "weight": "normal",
                },
                "ref": null,
                "rendered": "EDIT",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <styled.p
              size={22}
            >
              10
              % 
              increase
            </styled.p>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                10,
                "% ",
                "increase",
              ],
              "size": 22,
            },
            "ref": null,
            "rendered": Array [
              10,
              "% ",
              "increase",
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
