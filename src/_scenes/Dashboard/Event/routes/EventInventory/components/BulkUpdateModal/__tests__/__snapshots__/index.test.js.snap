// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BulkUpdateModal /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkUpdateModalPresenter
    cancelBulkUpdate={[MockFunction]}
    loading={false}
    rows={
      Array [
        Object {
          "seats": Array [
            1,
            2,
            3,
          ],
        },
        Object {
          "seats": Array [
            4,
            5,
            6,
          ],
        },
        Object {
          "seats": Array [
            7,
            8,
            9,
          ],
        },
      ]
    }
    submitBulkUpdate={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <ForwardRef>
            <ForwardRef>
              Bulk Inventory Update
            </ForwardRef>
            <ForwardRef
              size={14}
              weight={300}
            >
              Updating inventory for 
              3
               row(s).
            </ForwardRef>
          </ForwardRef>
          <ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Action
              </ForwardRef>
              <SelectDropdown
                full={true}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    },
                    Object {
                      "label": "Update Pricing Status",
                      "value": 1,
                    },
                  ]
                }
                placeholder="Select"
                selected={
                  Object {
                    "label": "Update Manual Price",
                    "value": 0,
                  }
                }
              />
            </ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Manual Price
              </ForwardRef>
              <NumberInputField
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gHboQg",
                      "isStatic": true,
                      "rules": Array [
                        "
  background-color: ",
                        "#FFFFFF",
                        ";
  border: 1px solid ",
                        "#999999",
                        ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gHboQg",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                id="manual-price"
                name="price"
                onBlur={[Function]}
                onChange={[Function]}
                placeholder="$ Manual Price"
                type="number"
                value=""
              />
            </ForwardRef>
            <ForwardRef
              justify="flex-end"
            >
              <ForwardRef
                margin="0 1rem 0 0"
                onClick={[MockFunction]}
                small={true}
              >
                Cancel
              </ForwardRef>
              <ForwardRef
                disabled={false}
                onClick={[Function]}
                small={true}
              >
                Submit
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>,
        <ForwardRef
          onClick={[MockFunction]}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Manual Price
                </ForwardRef>
                <NumberInputField
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gHboQg",
                        "isStatic": true,
                        "rules": Array [
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#999999",
                          ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gHboQg",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  id="manual-price"
                  name="price"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="$ Manual Price"
                  type="number"
                  value=""
                />
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={false}
                  onClick={[Function]}
                  small={true}
                >
                  Submit
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>,
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Bulk Inventory Update",
                },
                "ref": null,
                "rendered": "Bulk Inventory Update",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    [Function],
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dUjcNx",
                    "isStatic": false,
                    "rules": Array [
                      "
    color: ",
                      [Function],
                      ";
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
  ",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                      "#070707",
                      ";
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.h4))",
                  "foldedComponentIds": Array [
                    "sc-fjdhpX",
                    "sc-jzJRlG",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dUjcNx",
                  "target": "h4",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "size": 14,
                  "weight": 300,
                },
                "ref": null,
                "rendered": Array [
                  "Updating inventory for ",
                  3,
                  " row(s).",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jKJlTe",
                    "isStatic": false,
                    "rules": Array [
                      "
  font-size: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  text-align: ",
                      [Function],
                      ";
  opacity: ",
                      [Function],
                      ";
  cursor: ",
                      [Function],
                      ";

  ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.p)",
                  "foldedComponentIds": Array [
                    "sc-ckVGcZ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-jKJlTe",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fYiAbW",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#F8F8F8",
                  ";
  border-bottom: 1px solid ",
                  "#024A8F",
                  ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fYiAbW",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      }
                    }
                  />
                </ForwardRef>,
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Manual Price
                  </ForwardRef>
                  <NumberInputField
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    id="manual-price"
                    name="price"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="$ Manual Price"
                    type="number"
                    value=""
                  />
                </ForwardRef>,
                false,
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    small={true}
                  >
                    Submit
                  </ForwardRef>
                </ForwardRef>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Action
                    </ForwardRef>,
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        }
                      }
                    />,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Action",
                    },
                    "ref": null,
                    "rendered": "Action",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "full": true,
                      "onChange": [Function],
                      "options": Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ],
                      "placeholder": "Select",
                      "selected": Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dxgOiQ",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dxgOiQ",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Manual Price
                    </ForwardRef>,
                    <NumberInputField
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      id="manual-price"
                      name="price"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="$ Manual Price"
                      type="number"
                      value=""
                    />,
                    undefined,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Manual Price",
                    },
                    "ref": null,
                    "rendered": "Manual Price",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "id": "manual-price",
                      "name": "price",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "placeholder": "$ Manual Price",
                      "type": "number",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  undefined,
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eerKOB",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  position: relative;
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.div))",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                    "sc-dxgOiQ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-eerKOB",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>,
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      small={true}
                    >
                      Submit
                    </ForwardRef>,
                  ],
                  "justify": "flex-end",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Cancel",
                      "margin": "0 1rem 0 0",
                      "onClick": [MockFunction],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#38A9DB",
                          ";
  color: ",
                          "#38A9DB",
                          ";

  &:hover:not(:disabled) {
    background-color: ",
                          "#FFFFFF",
                          ";
    border: 1px solid ",
                          "#024A8F",
                          ";
    color: ",
                          "#024A8F",
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(styled.button)",
                      "foldedComponentIds": Array [
                        "sc-bZQynM",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Submit",
                      "disabled": false,
                      "onClick": [Function],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": "Submit",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "rules": Array [
                      "
  display: ",
                      [Function],
                      ";
  flex: ",
                      [Function],
                      ";
  flex-direction: ",
                      [Function],
                      "
  flex-grow: ",
                      [Function],
                      ";
  flex-shrink: ",
                      [Function],
                      ";
  flex-basis: ",
                      [Function],
                      ";
  flex-wrap: ",
                      [Function],
                      ";
  order: ",
                      [Function],
                      ";
  justify-content: ",
                      [Function],
                      ";
  align-items: ",
                      [Function],
                      ";
  align-content: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Flex",
                  "foldedComponentIds": Array [
                    "sc-eNQAEJ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fOKMvo",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#FFFFFF",
                  ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fOKMvo",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-krvtoX",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
              Keyframes {
                "id": "sc-keyframes-laneLq",
                "inject": [Function],
                "name": "laneLq",
                "rules": Array [
                  "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                ],
                "toString": [Function],
              },
              " 200ms ease-out;
  animation-fill-mode: forwards;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-krvtoX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-cbkKFq",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
              "#070707",
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-cbkKFq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-dxgOiQ",
        "isStatic": false,
        "rules": Array [
          "
  width: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Styled(styled.div)",
      "foldedComponentIds": Array [
        "sc-kpOJdX",
      ],
      "render": [Function],
      "styledComponentId": "sc-dxgOiQ",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Manual Price
                </ForwardRef>
                <NumberInputField
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gHboQg",
                        "isStatic": true,
                        "rules": Array [
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#999999",
                          ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gHboQg",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  id="manual-price"
                  name="price"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="$ Manual Price"
                  type="number"
                  value=""
                />
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={false}
                  onClick={[Function]}
                  small={true}
                >
                  Submit
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef
            onClick={[MockFunction]}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      }
                    }
                  />
                </ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Manual Price
                  </ForwardRef>
                  <NumberInputField
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    id="manual-price"
                    name="price"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="$ Manual Price"
                    type="number"
                    value=""
                  />
                </ForwardRef>
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    small={true}
                  >
                    Submit
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef>
                    Bulk Inventory Update
                  </ForwardRef>,
                  <ForwardRef
                    size={14}
                    weight={300}
                  >
                    Updating inventory for 
                    3
                     row(s).
                  </ForwardRef>,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Bulk Inventory Update",
                  },
                  "ref": null,
                  "rendered": "Bulk Inventory Update",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [
                      [Function],
                    ],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dUjcNx",
                      "isStatic": false,
                      "rules": Array [
                        "
    color: ",
                        [Function],
                        ";
    font-size: ",
                        [Function],
                        ";
    font-weight: ",
                        [Function],
                        ";
  ",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                        "#070707",
                        ";
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.h4))",
                    "foldedComponentIds": Array [
                      "sc-fjdhpX",
                      "sc-jzJRlG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dUjcNx",
                    "target": "h4",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Updating inventory for ",
                      3,
                      " row(s).",
                    ],
                    "size": 14,
                    "weight": 300,
                  },
                  "ref": null,
                  "rendered": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fYiAbW",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#F8F8F8",
                    ";
  border-bottom: 1px solid ",
                    "#024A8F",
                    ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fYiAbW",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Action
                    </ForwardRef>
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        }
                      }
                    />
                  </ForwardRef>,
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Manual Price
                    </ForwardRef>
                    <NumberInputField
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      id="manual-price"
                      name="price"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="$ Manual Price"
                      type="number"
                      value=""
                    />
                  </ForwardRef>,
                  false,
                  <ForwardRef
                    justify="flex-end"
                  >
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      small={true}
                    >
                      Submit
                    </ForwardRef>
                  </ForwardRef>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Action
                      </ForwardRef>,
                      <SelectDropdown
                        full={true}
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Update Manual Price",
                              "value": 0,
                            },
                            Object {
                              "label": "Update Pricing Status",
                              "value": 1,
                            },
                          ]
                        }
                        placeholder="Select"
                        selected={
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          }
                        }
                      />,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Action",
                      },
                      "ref": null,
                      "rendered": "Action",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "full": true,
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ],
                        "placeholder": "Select",
                        "selected": Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dxgOiQ",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dxgOiQ",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Manual Price
                      </ForwardRef>,
                      <NumberInputField
                        component={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-gHboQg",
                              "isStatic": true,
                              "rules": Array [
                                "
  background-color: ",
                                "#FFFFFF",
                                ";
  border: 1px solid ",
                                "#999999",
                                ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-gHboQg",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        id="manual-price"
                        name="price"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder="$ Manual Price"
                        type="number"
                        value=""
                      />,
                      undefined,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Manual Price",
                      },
                      "ref": null,
                      "rendered": "Manual Price",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "id": "manual-price",
                        "name": "price",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "placeholder": "$ Manual Price",
                        "type": "number",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    undefined,
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-eerKOB",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  position: relative;
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.div))",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                      "sc-dxgOiQ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-eerKOB",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef
                        margin="0 1rem 0 0"
                        onClick={[MockFunction]}
                        small={true}
                      >
                        Cancel
                      </ForwardRef>,
                      <ForwardRef
                        disabled={false}
                        onClick={[Function]}
                        small={true}
                      >
                        Submit
                      </ForwardRef>,
                    ],
                    "justify": "flex-end",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Cancel",
                        "margin": "0 1rem 0 0",
                        "onClick": [MockFunction],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": "Cancel",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#38A9DB",
                            ";
  color: ",
                            "#38A9DB",
                            ";

  &:hover:not(:disabled) {
    background-color: ",
                            "#FFFFFF",
                            ";
    border: 1px solid ",
                            "#024A8F",
                            ";
    color: ",
                            "#024A8F",
                            ";
  }
",
                          ],
                        },
                        "displayName": "Styled(styled.button)",
                        "foldedComponentIds": Array [
                          "sc-bZQynM",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Submit",
                        "disabled": false,
                        "onClick": [Function],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": "Submit",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-hMqMXs",
                      "isStatic": false,
                      "rules": Array [
                        "
  display: ",
                        [Function],
                        ";
  flex: ",
                        [Function],
                        ";
  flex-direction: ",
                        [Function],
                        "
  flex-grow: ",
                        [Function],
                        ";
  flex-shrink: ",
                        [Function],
                        ";
  flex-basis: ",
                        [Function],
                        ";
  flex-wrap: ",
                        [Function],
                        ";
  order: ",
                        [Function],
                        ";
  justify-content: ",
                        [Function],
                        ";
  align-items: ",
                        [Function],
                        ";
  align-content: ",
                        [Function],
                        ";
  align-self: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  width: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Flex",
                    "foldedComponentIds": Array [
                      "sc-eNQAEJ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-hMqMXs",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fOKMvo",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#FFFFFF",
                    ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fOKMvo",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
                Keyframes {
                  "id": "sc-keyframes-laneLq",
                  "inject": [Function],
                  "name": "laneLq",
                  "rules": Array [
                    "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                    "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  ],
                  "toString": [Function],
                },
                " 200ms ease-out;
  animation-fill-mode: forwards;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-cbkKFq",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
                "#070707",
                ";
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-cbkKFq",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dxgOiQ",
          "isStatic": false,
          "rules": Array [
            "
  width: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Styled(styled.div)",
        "foldedComponentIds": Array [
          "sc-kpOJdX",
        ],
        "render": [Function],
        "styledComponentId": "sc-dxgOiQ",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<BulkUpdateModal /> should render correctly when an invalid manual price is entered and blurred 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkUpdateModalPresenter
    cancelBulkUpdate={[MockFunction]}
    loading={false}
    rows={
      Array [
        Object {
          "seats": Array [
            1,
            2,
            3,
          ],
        },
        Object {
          "seats": Array [
            4,
            5,
            6,
          ],
        },
        Object {
          "seats": Array [
            7,
            8,
            9,
          ],
        },
      ]
    }
    submitBulkUpdate={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <ForwardRef>
            <ForwardRef>
              Bulk Inventory Update
            </ForwardRef>
            <ForwardRef
              size={14}
              weight={300}
            >
              Updating inventory for 
              3
               row(s).
            </ForwardRef>
          </ForwardRef>
          <ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Action
              </ForwardRef>
              <SelectDropdown
                full={true}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    },
                    Object {
                      "label": "Update Pricing Status",
                      "value": 1,
                    },
                  ]
                }
                placeholder="Select"
                selected={
                  Object {
                    "label": "Update Manual Price",
                    "value": 0,
                  }
                }
              />
            </ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Manual Price
              </ForwardRef>
              <NumberInputField
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gHboQg",
                      "isStatic": true,
                      "rules": Array [
                        "
  background-color: ",
                        "#FFFFFF",
                        ";
  border: 1px solid ",
                        "#999999",
                        ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gHboQg",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                id="manual-price"
                name="price"
                onBlur={[Function]}
                onChange={[Function]}
                placeholder="$ Manual Price"
                type="number"
                value="12.222"
              />
              <ForwardRef
                color="#DC0A0A"
                marginTop="0.5rem"
                size={12}
                weight={300}
              >
                Manual Price must be a valid dollar amount.
              </ForwardRef>
            </ForwardRef>
            <ForwardRef
              justify="flex-end"
            >
              <ForwardRef
                margin="0 1rem 0 0"
                onClick={[MockFunction]}
                small={true}
              >
                Cancel
              </ForwardRef>
              <ForwardRef
                disabled={true}
                onClick={[Function]}
                small={true}
              >
                Submit
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>,
        <ForwardRef
          onClick={[MockFunction]}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Manual Price
                </ForwardRef>
                <NumberInputField
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gHboQg",
                        "isStatic": true,
                        "rules": Array [
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#999999",
                          ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gHboQg",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  id="manual-price"
                  name="price"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="$ Manual Price"
                  type="number"
                  value="12.222"
                />
                <ForwardRef
                  color="#DC0A0A"
                  marginTop="0.5rem"
                  size={12}
                  weight={300}
                >
                  Manual Price must be a valid dollar amount.
                </ForwardRef>
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={true}
                  onClick={[Function]}
                  small={true}
                >
                  Submit
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>,
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Bulk Inventory Update",
                },
                "ref": null,
                "rendered": "Bulk Inventory Update",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    [Function],
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dUjcNx",
                    "isStatic": false,
                    "rules": Array [
                      "
    color: ",
                      [Function],
                      ";
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
  ",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                      "#070707",
                      ";
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.h4))",
                  "foldedComponentIds": Array [
                    "sc-fjdhpX",
                    "sc-jzJRlG",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dUjcNx",
                  "target": "h4",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "size": 14,
                  "weight": 300,
                },
                "ref": null,
                "rendered": Array [
                  "Updating inventory for ",
                  3,
                  " row(s).",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jKJlTe",
                    "isStatic": false,
                    "rules": Array [
                      "
  font-size: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  text-align: ",
                      [Function],
                      ";
  opacity: ",
                      [Function],
                      ";
  cursor: ",
                      [Function],
                      ";

  ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.p)",
                  "foldedComponentIds": Array [
                    "sc-ckVGcZ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-jKJlTe",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fYiAbW",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#F8F8F8",
                  ";
  border-bottom: 1px solid ",
                  "#024A8F",
                  ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fYiAbW",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      }
                    }
                  />
                </ForwardRef>,
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Manual Price
                  </ForwardRef>
                  <NumberInputField
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    id="manual-price"
                    name="price"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="$ Manual Price"
                    type="number"
                    value="12.222"
                  />
                  <ForwardRef
                    color="#DC0A0A"
                    marginTop="0.5rem"
                    size={12}
                    weight={300}
                  >
                    Manual Price must be a valid dollar amount.
                  </ForwardRef>
                </ForwardRef>,
                false,
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={true}
                    onClick={[Function]}
                    small={true}
                  >
                    Submit
                  </ForwardRef>
                </ForwardRef>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Action
                    </ForwardRef>,
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        }
                      }
                    />,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Action",
                    },
                    "ref": null,
                    "rendered": "Action",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "full": true,
                      "onChange": [Function],
                      "options": Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ],
                      "placeholder": "Select",
                      "selected": Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dxgOiQ",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dxgOiQ",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Manual Price
                    </ForwardRef>,
                    <NumberInputField
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      id="manual-price"
                      name="price"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="$ Manual Price"
                      type="number"
                      value="12.222"
                    />,
                    <ForwardRef
                      color="#DC0A0A"
                      marginTop="0.5rem"
                      size={12}
                      weight={300}
                    >
                      Manual Price must be a valid dollar amount.
                    </ForwardRef>,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Manual Price",
                    },
                    "ref": null,
                    "rendered": "Manual Price",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "id": "manual-price",
                      "name": "price",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "placeholder": "$ Manual Price",
                      "type": "number",
                      "value": "12.222",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Manual Price must be a valid dollar amount.",
                      "color": "#DC0A0A",
                      "marginTop": "0.5rem",
                      "size": 12,
                      "weight": 300,
                    },
                    "ref": null,
                    "rendered": "Manual Price must be a valid dollar amount.",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-emmjRN",
                        "isStatic": false,
                        "rules": Array [
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
  color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  text-align: ",
                          [Function],
                          ";
  opacity: ",
                          [Function],
                          ";
  cursor: ",
                          [Function],
                          ";

  ",
                          [Function],
                          ";
",
                          "
    margin: ",
                          [Function],
                          ";
    margin-top: ",
                          [Function],
                          ";
    margin-bottom: ",
                          [Function],
                          ";
    margin-left: ",
                          [Function],
                          ";
    margin-right: ",
                          [Function],
                          ";

    padding: ",
                          [Function],
                          ";
    padding-top: ",
                          [Function],
                          ";
    padding-bottom: ",
                          [Function],
                          ";
    padding-left: ",
                          [Function],
                          ";
    padding-right: ",
                          [Function],
                          ";

    border: ",
                          [Function],
                          ";
    border-top: ",
                          [Function],
                          ";
    border-bottom: ",
                          [Function],
                          ";
    border-left: ",
                          [Function],
                          ";
    border-right: ",
                          [Function],
                          ";
  ",
                          "
  position: absolute;
  top: 100%;
",
                        ],
                      },
                      "displayName": "Styled(Styled(styled.p))",
                      "foldedComponentIds": Array [
                        "sc-ckVGcZ",
                        "sc-jKJlTe",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-emmjRN",
                      "target": "p",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eerKOB",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  position: relative;
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.div))",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                    "sc-dxgOiQ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-eerKOB",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>,
                    <ForwardRef
                      disabled={true}
                      onClick={[Function]}
                      small={true}
                    >
                      Submit
                    </ForwardRef>,
                  ],
                  "justify": "flex-end",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Cancel",
                      "margin": "0 1rem 0 0",
                      "onClick": [MockFunction],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#38A9DB",
                          ";
  color: ",
                          "#38A9DB",
                          ";

  &:hover:not(:disabled) {
    background-color: ",
                          "#FFFFFF",
                          ";
    border: 1px solid ",
                          "#024A8F",
                          ";
    color: ",
                          "#024A8F",
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(styled.button)",
                      "foldedComponentIds": Array [
                        "sc-bZQynM",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Submit",
                      "disabled": true,
                      "onClick": [Function],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": "Submit",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "rules": Array [
                      "
  display: ",
                      [Function],
                      ";
  flex: ",
                      [Function],
                      ";
  flex-direction: ",
                      [Function],
                      "
  flex-grow: ",
                      [Function],
                      ";
  flex-shrink: ",
                      [Function],
                      ";
  flex-basis: ",
                      [Function],
                      ";
  flex-wrap: ",
                      [Function],
                      ";
  order: ",
                      [Function],
                      ";
  justify-content: ",
                      [Function],
                      ";
  align-items: ",
                      [Function],
                      ";
  align-content: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Flex",
                  "foldedComponentIds": Array [
                    "sc-eNQAEJ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fOKMvo",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#FFFFFF",
                  ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fOKMvo",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-krvtoX",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
              Keyframes {
                "id": "sc-keyframes-laneLq",
                "inject": [Function],
                "name": "laneLq",
                "rules": Array [
                  "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                ],
                "toString": [Function],
              },
              " 200ms ease-out;
  animation-fill-mode: forwards;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-krvtoX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-cbkKFq",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
              "#070707",
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-cbkKFq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-dxgOiQ",
        "isStatic": false,
        "rules": Array [
          "
  width: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Styled(styled.div)",
      "foldedComponentIds": Array [
        "sc-kpOJdX",
      ],
      "render": [Function],
      "styledComponentId": "sc-dxgOiQ",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Manual Price
                </ForwardRef>
                <NumberInputField
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gHboQg",
                        "isStatic": true,
                        "rules": Array [
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#999999",
                          ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gHboQg",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  id="manual-price"
                  name="price"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="$ Manual Price"
                  type="number"
                  value="12.222"
                />
                <ForwardRef
                  color="#DC0A0A"
                  marginTop="0.5rem"
                  size={12}
                  weight={300}
                >
                  Manual Price must be a valid dollar amount.
                </ForwardRef>
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={true}
                  onClick={[Function]}
                  small={true}
                >
                  Submit
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef
            onClick={[MockFunction]}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      }
                    }
                  />
                </ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Manual Price
                  </ForwardRef>
                  <NumberInputField
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    id="manual-price"
                    name="price"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="$ Manual Price"
                    type="number"
                    value="12.222"
                  />
                  <ForwardRef
                    color="#DC0A0A"
                    marginTop="0.5rem"
                    size={12}
                    weight={300}
                  >
                    Manual Price must be a valid dollar amount.
                  </ForwardRef>
                </ForwardRef>
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={true}
                    onClick={[Function]}
                    small={true}
                  >
                    Submit
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef>
                    Bulk Inventory Update
                  </ForwardRef>,
                  <ForwardRef
                    size={14}
                    weight={300}
                  >
                    Updating inventory for 
                    3
                     row(s).
                  </ForwardRef>,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Bulk Inventory Update",
                  },
                  "ref": null,
                  "rendered": "Bulk Inventory Update",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [
                      [Function],
                    ],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dUjcNx",
                      "isStatic": false,
                      "rules": Array [
                        "
    color: ",
                        [Function],
                        ";
    font-size: ",
                        [Function],
                        ";
    font-weight: ",
                        [Function],
                        ";
  ",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                        "#070707",
                        ";
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.h4))",
                    "foldedComponentIds": Array [
                      "sc-fjdhpX",
                      "sc-jzJRlG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dUjcNx",
                    "target": "h4",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Updating inventory for ",
                      3,
                      " row(s).",
                    ],
                    "size": 14,
                    "weight": 300,
                  },
                  "ref": null,
                  "rendered": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fYiAbW",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#F8F8F8",
                    ";
  border-bottom: 1px solid ",
                    "#024A8F",
                    ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fYiAbW",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Action
                    </ForwardRef>
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        }
                      }
                    />
                  </ForwardRef>,
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Manual Price
                    </ForwardRef>
                    <NumberInputField
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      id="manual-price"
                      name="price"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="$ Manual Price"
                      type="number"
                      value="12.222"
                    />
                    <ForwardRef
                      color="#DC0A0A"
                      marginTop="0.5rem"
                      size={12}
                      weight={300}
                    >
                      Manual Price must be a valid dollar amount.
                    </ForwardRef>
                  </ForwardRef>,
                  false,
                  <ForwardRef
                    justify="flex-end"
                  >
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>
                    <ForwardRef
                      disabled={true}
                      onClick={[Function]}
                      small={true}
                    >
                      Submit
                    </ForwardRef>
                  </ForwardRef>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Action
                      </ForwardRef>,
                      <SelectDropdown
                        full={true}
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Update Manual Price",
                              "value": 0,
                            },
                            Object {
                              "label": "Update Pricing Status",
                              "value": 1,
                            },
                          ]
                        }
                        placeholder="Select"
                        selected={
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          }
                        }
                      />,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Action",
                      },
                      "ref": null,
                      "rendered": "Action",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "full": true,
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ],
                        "placeholder": "Select",
                        "selected": Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dxgOiQ",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dxgOiQ",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Manual Price
                      </ForwardRef>,
                      <NumberInputField
                        component={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-gHboQg",
                              "isStatic": true,
                              "rules": Array [
                                "
  background-color: ",
                                "#FFFFFF",
                                ";
  border: 1px solid ",
                                "#999999",
                                ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-gHboQg",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        id="manual-price"
                        name="price"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder="$ Manual Price"
                        type="number"
                        value="12.222"
                      />,
                      <ForwardRef
                        color="#DC0A0A"
                        marginTop="0.5rem"
                        size={12}
                        weight={300}
                      >
                        Manual Price must be a valid dollar amount.
                      </ForwardRef>,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Manual Price",
                      },
                      "ref": null,
                      "rendered": "Manual Price",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "id": "manual-price",
                        "name": "price",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "placeholder": "$ Manual Price",
                        "type": "number",
                        "value": "12.222",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Manual Price must be a valid dollar amount.",
                        "color": "#DC0A0A",
                        "marginTop": "0.5rem",
                        "size": 12,
                        "weight": 300,
                      },
                      "ref": null,
                      "rendered": "Manual Price must be a valid dollar amount.",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-emmjRN",
                          "isStatic": false,
                          "rules": Array [
                            "
  font-size: ",
                            [Function],
                            ";
  font-weight: ",
                            [Function],
                            ";
  color: ",
                            [Function],
                            ";
  margin: ",
                            [Function],
                            ";
  text-align: ",
                            [Function],
                            ";
  opacity: ",
                            [Function],
                            ";
  cursor: ",
                            [Function],
                            ";

  ",
                            [Function],
                            ";
",
                            "
    margin: ",
                            [Function],
                            ";
    margin-top: ",
                            [Function],
                            ";
    margin-bottom: ",
                            [Function],
                            ";
    margin-left: ",
                            [Function],
                            ";
    margin-right: ",
                            [Function],
                            ";

    padding: ",
                            [Function],
                            ";
    padding-top: ",
                            [Function],
                            ";
    padding-bottom: ",
                            [Function],
                            ";
    padding-left: ",
                            [Function],
                            ";
    padding-right: ",
                            [Function],
                            ";

    border: ",
                            [Function],
                            ";
    border-top: ",
                            [Function],
                            ";
    border-bottom: ",
                            [Function],
                            ";
    border-left: ",
                            [Function],
                            ";
    border-right: ",
                            [Function],
                            ";
  ",
                            "
  position: absolute;
  top: 100%;
",
                          ],
                        },
                        "displayName": "Styled(Styled(styled.p))",
                        "foldedComponentIds": Array [
                          "sc-ckVGcZ",
                          "sc-jKJlTe",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-emmjRN",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-eerKOB",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  position: relative;
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.div))",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                      "sc-dxgOiQ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-eerKOB",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef
                        margin="0 1rem 0 0"
                        onClick={[MockFunction]}
                        small={true}
                      >
                        Cancel
                      </ForwardRef>,
                      <ForwardRef
                        disabled={true}
                        onClick={[Function]}
                        small={true}
                      >
                        Submit
                      </ForwardRef>,
                    ],
                    "justify": "flex-end",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Cancel",
                        "margin": "0 1rem 0 0",
                        "onClick": [MockFunction],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": "Cancel",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#38A9DB",
                            ";
  color: ",
                            "#38A9DB",
                            ";

  &:hover:not(:disabled) {
    background-color: ",
                            "#FFFFFF",
                            ";
    border: 1px solid ",
                            "#024A8F",
                            ";
    color: ",
                            "#024A8F",
                            ";
  }
",
                          ],
                        },
                        "displayName": "Styled(styled.button)",
                        "foldedComponentIds": Array [
                          "sc-bZQynM",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Submit",
                        "disabled": true,
                        "onClick": [Function],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": "Submit",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-hMqMXs",
                      "isStatic": false,
                      "rules": Array [
                        "
  display: ",
                        [Function],
                        ";
  flex: ",
                        [Function],
                        ";
  flex-direction: ",
                        [Function],
                        "
  flex-grow: ",
                        [Function],
                        ";
  flex-shrink: ",
                        [Function],
                        ";
  flex-basis: ",
                        [Function],
                        ";
  flex-wrap: ",
                        [Function],
                        ";
  order: ",
                        [Function],
                        ";
  justify-content: ",
                        [Function],
                        ";
  align-items: ",
                        [Function],
                        ";
  align-content: ",
                        [Function],
                        ";
  align-self: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  width: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Flex",
                    "foldedComponentIds": Array [
                      "sc-eNQAEJ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-hMqMXs",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fOKMvo",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#FFFFFF",
                    ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fOKMvo",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
                Keyframes {
                  "id": "sc-keyframes-laneLq",
                  "inject": [Function],
                  "name": "laneLq",
                  "rules": Array [
                    "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                    "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  ],
                  "toString": [Function],
                },
                " 200ms ease-out;
  animation-fill-mode: forwards;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-cbkKFq",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
                "#070707",
                ";
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-cbkKFq",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dxgOiQ",
          "isStatic": false,
          "rules": Array [
            "
  width: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Styled(styled.div)",
        "foldedComponentIds": Array [
          "sc-kpOJdX",
        ],
        "render": [Function],
        "styledComponentId": "sc-dxgOiQ",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<BulkUpdateModal /> should render correctly when loading is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkUpdateModalPresenter
    cancelBulkUpdate={[MockFunction]}
    loading={true}
    rows={
      Array [
        Object {
          "seats": Array [
            1,
            2,
            3,
          ],
        },
        Object {
          "seats": Array [
            4,
            5,
            6,
          ],
        },
        Object {
          "seats": Array [
            7,
            8,
            9,
          ],
        },
      ]
    }
    submitBulkUpdate={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <ForwardRef>
            <ForwardRef>
              Bulk Inventory Update
            </ForwardRef>
            <ForwardRef
              size={14}
              weight={300}
            >
              Updating inventory for 
              3
               row(s).
            </ForwardRef>
          </ForwardRef>
          <ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Action
              </ForwardRef>
              <SelectDropdown
                full={true}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    },
                    Object {
                      "label": "Update Pricing Status",
                      "value": 1,
                    },
                  ]
                }
                placeholder="Select"
                selected={
                  Object {
                    "label": "Update Manual Price",
                    "value": 0,
                  }
                }
              />
            </ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Manual Price
              </ForwardRef>
              <NumberInputField
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gHboQg",
                      "isStatic": true,
                      "rules": Array [
                        "
  background-color: ",
                        "#FFFFFF",
                        ";
  border: 1px solid ",
                        "#999999",
                        ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gHboQg",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                id="manual-price"
                name="price"
                onBlur={[Function]}
                onChange={[Function]}
                placeholder="$ Manual Price"
                type="number"
                value=""
              />
            </ForwardRef>
            <ForwardRef
              justify="flex-end"
            >
              <ForwardRef
                margin="0 1rem 0 0"
                onClick={[MockFunction]}
                small={true}
              >
                Cancel
              </ForwardRef>
              <ForwardRef
                disabled={false}
                onClick={[Function]}
                small={true}
              >
                <Loader
                  color="#FFFFFF"
                  small={true}
                />
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>,
        <ForwardRef
          onClick={[MockFunction]}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Manual Price
                </ForwardRef>
                <NumberInputField
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gHboQg",
                        "isStatic": true,
                        "rules": Array [
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#999999",
                          ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gHboQg",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  id="manual-price"
                  name="price"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="$ Manual Price"
                  type="number"
                  value=""
                />
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={false}
                  onClick={[Function]}
                  small={true}
                >
                  <Loader
                    color="#FFFFFF"
                    small={true}
                  />
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>,
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Bulk Inventory Update",
                },
                "ref": null,
                "rendered": "Bulk Inventory Update",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    [Function],
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dUjcNx",
                    "isStatic": false,
                    "rules": Array [
                      "
    color: ",
                      [Function],
                      ";
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
  ",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                      "#070707",
                      ";
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.h4))",
                  "foldedComponentIds": Array [
                    "sc-fjdhpX",
                    "sc-jzJRlG",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dUjcNx",
                  "target": "h4",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "size": 14,
                  "weight": 300,
                },
                "ref": null,
                "rendered": Array [
                  "Updating inventory for ",
                  3,
                  " row(s).",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jKJlTe",
                    "isStatic": false,
                    "rules": Array [
                      "
  font-size: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  text-align: ",
                      [Function],
                      ";
  opacity: ",
                      [Function],
                      ";
  cursor: ",
                      [Function],
                      ";

  ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.p)",
                  "foldedComponentIds": Array [
                    "sc-ckVGcZ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-jKJlTe",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fYiAbW",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#F8F8F8",
                  ";
  border-bottom: 1px solid ",
                  "#024A8F",
                  ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fYiAbW",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      }
                    }
                  />
                </ForwardRef>,
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Manual Price
                  </ForwardRef>
                  <NumberInputField
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    id="manual-price"
                    name="price"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="$ Manual Price"
                    type="number"
                    value=""
                  />
                </ForwardRef>,
                false,
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    small={true}
                  >
                    <Loader
                      color="#FFFFFF"
                      small={true}
                    />
                  </ForwardRef>
                </ForwardRef>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Action
                    </ForwardRef>,
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        }
                      }
                    />,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Action",
                    },
                    "ref": null,
                    "rendered": "Action",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "full": true,
                      "onChange": [Function],
                      "options": Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ],
                      "placeholder": "Select",
                      "selected": Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dxgOiQ",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dxgOiQ",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Manual Price
                    </ForwardRef>,
                    <NumberInputField
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      id="manual-price"
                      name="price"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="$ Manual Price"
                      type="number"
                      value=""
                    />,
                    undefined,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Manual Price",
                    },
                    "ref": null,
                    "rendered": "Manual Price",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "id": "manual-price",
                      "name": "price",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "placeholder": "$ Manual Price",
                      "type": "number",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  undefined,
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eerKOB",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  position: relative;
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.div))",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                    "sc-dxgOiQ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-eerKOB",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>,
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      small={true}
                    >
                      <Loader
                        color="#FFFFFF"
                        small={true}
                      />
                    </ForwardRef>,
                  ],
                  "justify": "flex-end",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Cancel",
                      "margin": "0 1rem 0 0",
                      "onClick": [MockFunction],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#38A9DB",
                          ";
  color: ",
                          "#38A9DB",
                          ";

  &:hover:not(:disabled) {
    background-color: ",
                          "#FFFFFF",
                          ";
    border: 1px solid ",
                          "#024A8F",
                          ";
    color: ",
                          "#024A8F",
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(styled.button)",
                      "foldedComponentIds": Array [
                        "sc-bZQynM",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": <Loader
                        color="#FFFFFF"
                        small={true}
                      />,
                      "disabled": false,
                      "onClick": [Function],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "color": "#FFFFFF",
                        "small": true,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "rules": Array [
                      "
  display: ",
                      [Function],
                      ";
  flex: ",
                      [Function],
                      ";
  flex-direction: ",
                      [Function],
                      "
  flex-grow: ",
                      [Function],
                      ";
  flex-shrink: ",
                      [Function],
                      ";
  flex-basis: ",
                      [Function],
                      ";
  flex-wrap: ",
                      [Function],
                      ";
  order: ",
                      [Function],
                      ";
  justify-content: ",
                      [Function],
                      ";
  align-items: ",
                      [Function],
                      ";
  align-content: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Flex",
                  "foldedComponentIds": Array [
                    "sc-eNQAEJ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fOKMvo",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#FFFFFF",
                  ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fOKMvo",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-krvtoX",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
              Keyframes {
                "id": "sc-keyframes-laneLq",
                "inject": [Function],
                "name": "laneLq",
                "rules": Array [
                  "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                ],
                "toString": [Function],
              },
              " 200ms ease-out;
  animation-fill-mode: forwards;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-krvtoX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-cbkKFq",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
              "#070707",
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-cbkKFq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-dxgOiQ",
        "isStatic": false,
        "rules": Array [
          "
  width: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Styled(styled.div)",
      "foldedComponentIds": Array [
        "sc-kpOJdX",
      ],
      "render": [Function],
      "styledComponentId": "sc-dxgOiQ",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Manual Price
                </ForwardRef>
                <NumberInputField
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gHboQg",
                        "isStatic": true,
                        "rules": Array [
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#999999",
                          ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gHboQg",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  id="manual-price"
                  name="price"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="$ Manual Price"
                  type="number"
                  value=""
                />
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={false}
                  onClick={[Function]}
                  small={true}
                >
                  <Loader
                    color="#FFFFFF"
                    small={true}
                  />
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef
            onClick={[MockFunction]}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      }
                    }
                  />
                </ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Manual Price
                  </ForwardRef>
                  <NumberInputField
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gHboQg",
                          "isStatic": true,
                          "rules": Array [
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#999999",
                            ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gHboQg",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    id="manual-price"
                    name="price"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="$ Manual Price"
                    type="number"
                    value=""
                  />
                </ForwardRef>
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    small={true}
                  >
                    <Loader
                      color="#FFFFFF"
                      small={true}
                    />
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef>
                    Bulk Inventory Update
                  </ForwardRef>,
                  <ForwardRef
                    size={14}
                    weight={300}
                  >
                    Updating inventory for 
                    3
                     row(s).
                  </ForwardRef>,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Bulk Inventory Update",
                  },
                  "ref": null,
                  "rendered": "Bulk Inventory Update",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [
                      [Function],
                    ],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dUjcNx",
                      "isStatic": false,
                      "rules": Array [
                        "
    color: ",
                        [Function],
                        ";
    font-size: ",
                        [Function],
                        ";
    font-weight: ",
                        [Function],
                        ";
  ",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                        "#070707",
                        ";
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.h4))",
                    "foldedComponentIds": Array [
                      "sc-fjdhpX",
                      "sc-jzJRlG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dUjcNx",
                    "target": "h4",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Updating inventory for ",
                      3,
                      " row(s).",
                    ],
                    "size": 14,
                    "weight": 300,
                  },
                  "ref": null,
                  "rendered": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fYiAbW",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#F8F8F8",
                    ";
  border-bottom: 1px solid ",
                    "#024A8F",
                    ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fYiAbW",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Action
                    </ForwardRef>
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        }
                      }
                    />
                  </ForwardRef>,
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Manual Price
                    </ForwardRef>
                    <NumberInputField
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      id="manual-price"
                      name="price"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="$ Manual Price"
                      type="number"
                      value=""
                    />
                  </ForwardRef>,
                  false,
                  <ForwardRef
                    justify="flex-end"
                  >
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      small={true}
                    >
                      <Loader
                        color="#FFFFFF"
                        small={true}
                      />
                    </ForwardRef>
                  </ForwardRef>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Action
                      </ForwardRef>,
                      <SelectDropdown
                        full={true}
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Update Manual Price",
                              "value": 0,
                            },
                            Object {
                              "label": "Update Pricing Status",
                              "value": 1,
                            },
                          ]
                        }
                        placeholder="Select"
                        selected={
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          }
                        }
                      />,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Action",
                      },
                      "ref": null,
                      "rendered": "Action",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "full": true,
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ],
                        "placeholder": "Select",
                        "selected": Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dxgOiQ",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dxgOiQ",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Manual Price
                      </ForwardRef>,
                      <NumberInputField
                        component={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-gHboQg",
                              "isStatic": true,
                              "rules": Array [
                                "
  background-color: ",
                                "#FFFFFF",
                                ";
  border: 1px solid ",
                                "#999999",
                                ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-gHboQg",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        id="manual-price"
                        name="price"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder="$ Manual Price"
                        type="number"
                        value=""
                      />,
                      undefined,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Manual Price",
                      },
                      "ref": null,
                      "rendered": "Manual Price",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gHboQg",
                            "isStatic": true,
                            "rules": Array [
                              "
  background-color: ",
                              "#FFFFFF",
                              ";
  border: 1px solid ",
                              "#999999",
                              ";
  border-radius: 3px;
  box-sizing: border-box;
  height: 40px;
  margin: 0;
  padding: 0 0.5rem;
  width: 100%;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gHboQg",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "id": "manual-price",
                        "name": "price",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "placeholder": "$ Manual Price",
                        "type": "number",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    undefined,
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-eerKOB",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  position: relative;
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.div))",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                      "sc-dxgOiQ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-eerKOB",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef
                        margin="0 1rem 0 0"
                        onClick={[MockFunction]}
                        small={true}
                      >
                        Cancel
                      </ForwardRef>,
                      <ForwardRef
                        disabled={false}
                        onClick={[Function]}
                        small={true}
                      >
                        <Loader
                          color="#FFFFFF"
                          small={true}
                        />
                      </ForwardRef>,
                    ],
                    "justify": "flex-end",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Cancel",
                        "margin": "0 1rem 0 0",
                        "onClick": [MockFunction],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": "Cancel",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#38A9DB",
                            ";
  color: ",
                            "#38A9DB",
                            ";

  &:hover:not(:disabled) {
    background-color: ",
                            "#FFFFFF",
                            ";
    border: 1px solid ",
                            "#024A8F",
                            ";
    color: ",
                            "#024A8F",
                            ";
  }
",
                          ],
                        },
                        "displayName": "Styled(styled.button)",
                        "foldedComponentIds": Array [
                          "sc-bZQynM",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": <Loader
                          color="#FFFFFF"
                          small={true}
                        />,
                        "disabled": false,
                        "onClick": [Function],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "color": "#FFFFFF",
                          "small": true,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-hMqMXs",
                      "isStatic": false,
                      "rules": Array [
                        "
  display: ",
                        [Function],
                        ";
  flex: ",
                        [Function],
                        ";
  flex-direction: ",
                        [Function],
                        "
  flex-grow: ",
                        [Function],
                        ";
  flex-shrink: ",
                        [Function],
                        ";
  flex-basis: ",
                        [Function],
                        ";
  flex-wrap: ",
                        [Function],
                        ";
  order: ",
                        [Function],
                        ";
  justify-content: ",
                        [Function],
                        ";
  align-items: ",
                        [Function],
                        ";
  align-content: ",
                        [Function],
                        ";
  align-self: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  width: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Flex",
                    "foldedComponentIds": Array [
                      "sc-eNQAEJ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-hMqMXs",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fOKMvo",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#FFFFFF",
                    ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fOKMvo",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
                Keyframes {
                  "id": "sc-keyframes-laneLq",
                  "inject": [Function],
                  "name": "laneLq",
                  "rules": Array [
                    "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                    "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  ],
                  "toString": [Function],
                },
                " 200ms ease-out;
  animation-fill-mode: forwards;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-cbkKFq",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
                "#070707",
                ";
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-cbkKFq",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dxgOiQ",
          "isStatic": false,
          "rules": Array [
            "
  width: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Styled(styled.div)",
        "foldedComponentIds": Array [
          "sc-kpOJdX",
        ],
        "render": [Function],
        "styledComponentId": "sc-dxgOiQ",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<BulkUpdateModal /> should render correctly when the selectedAction is changed 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkUpdateModalPresenter
    cancelBulkUpdate={[MockFunction]}
    loading={true}
    rows={
      Array [
        Object {
          "seats": Array [
            1,
            2,
            3,
          ],
        },
        Object {
          "seats": Array [
            4,
            5,
            6,
          ],
        },
        Object {
          "seats": Array [
            7,
            8,
            9,
          ],
        },
      ]
    }
    submitBulkUpdate={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <ForwardRef>
            <ForwardRef>
              Bulk Inventory Update
            </ForwardRef>
            <ForwardRef
              size={14}
              weight={300}
            >
              Updating inventory for 
              3
               row(s).
            </ForwardRef>
          </ForwardRef>
          <ForwardRef>
            <ForwardRef
              marginBottom="2rem"
            >
              <ForwardRef>
                Action
              </ForwardRef>
              <SelectDropdown
                full={true}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Update Manual Price",
                      "value": 0,
                    },
                    Object {
                      "label": "Update Pricing Status",
                      "value": 1,
                    },
                  ]
                }
                placeholder="Select"
                selected={
                  Object {
                    "label": "Update Pricing Status",
                    "value": 1,
                  }
                }
              />
            </ForwardRef>
            <ForwardRef
              marginBottom="1.5rem"
            >
              <ForwardRef>
                Pricing
              </ForwardRef>
              <Toggle
                isChecked=""
                onChange={[Function]}
                size="small"
              />
            </ForwardRef>
            <ForwardRef
              justify="flex-end"
            >
              <ForwardRef
                margin="0 1rem 0 0"
                onClick={[MockFunction]}
                small={true}
              >
                Cancel
              </ForwardRef>
              <ForwardRef
                disabled={false}
                onClick={[Function]}
                small={true}
              >
                <Loader
                  color="#FFFFFF"
                  small={true}
                />
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>,
        <ForwardRef
          onClick={[MockFunction]}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Pricing Status",
                      "value": 1,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="1.5rem"
              >
                <ForwardRef>
                  Pricing
                </ForwardRef>
                <Toggle
                  isChecked=""
                  onChange={[Function]}
                  size="small"
                />
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={false}
                  onClick={[Function]}
                  small={true}
                >
                  <Loader
                    color="#FFFFFF"
                    small={true}
                  />
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>,
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Bulk Inventory Update",
                },
                "ref": null,
                "rendered": "Bulk Inventory Update",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    [Function],
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dUjcNx",
                    "isStatic": false,
                    "rules": Array [
                      "
    color: ",
                      [Function],
                      ";
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
  ",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                      "#070707",
                      ";
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.h4))",
                  "foldedComponentIds": Array [
                    "sc-fjdhpX",
                    "sc-jzJRlG",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dUjcNx",
                  "target": "h4",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "size": 14,
                  "weight": 300,
                },
                "ref": null,
                "rendered": Array [
                  "Updating inventory for ",
                  3,
                  " row(s).",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jKJlTe",
                    "isStatic": false,
                    "rules": Array [
                      "
  font-size: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  text-align: ",
                      [Function],
                      ";
  opacity: ",
                      [Function],
                      ";
  cursor: ",
                      [Function],
                      ";

  ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.p)",
                  "foldedComponentIds": Array [
                    "sc-ckVGcZ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-jKJlTe",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fYiAbW",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#F8F8F8",
                  ";
  border-bottom: 1px solid ",
                  "#024A8F",
                  ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fYiAbW",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      }
                    }
                  />
                </ForwardRef>,
                false,
                <ForwardRef
                  marginBottom="1.5rem"
                >
                  <ForwardRef>
                    Pricing
                  </ForwardRef>
                  <Toggle
                    isChecked=""
                    onChange={[Function]}
                    size="small"
                  />
                </ForwardRef>,
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    small={true}
                  >
                    <Loader
                      color="#FFFFFF"
                      small={true}
                    />
                  </ForwardRef>
                </ForwardRef>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Action
                    </ForwardRef>,
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        }
                      }
                    />,
                  ],
                  "marginBottom": "2rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Action",
                    },
                    "ref": null,
                    "rendered": "Action",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "full": true,
                      "onChange": [Function],
                      "options": Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ],
                      "placeholder": "Select",
                      "selected": Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dxgOiQ",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-dxgOiQ",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef>
                      Pricing
                    </ForwardRef>,
                    <Toggle
                      isChecked=""
                      onChange={[Function]}
                      size="small"
                    />,
                  ],
                  "marginBottom": "1.5rem",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Pricing",
                    },
                    "ref": null,
                    "rendered": "Pricing",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-eilVRo",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                          "#070707",
                          ";
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-eilVRo",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "isChecked": "",
                      "onChange": [Function],
                      "size": "small",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eerKOB",
                    "isStatic": false,
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                      "
  position: relative;
",
                    ],
                  },
                  "displayName": "Styled(Styled(styled.div))",
                  "foldedComponentIds": Array [
                    "sc-kpOJdX",
                    "sc-dxgOiQ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-eerKOB",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>,
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      small={true}
                    >
                      <Loader
                        color="#FFFFFF"
                        small={true}
                      />
                    </ForwardRef>,
                  ],
                  "justify": "flex-end",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Cancel",
                      "margin": "0 1rem 0 0",
                      "onClick": [MockFunction],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                          "
  background-color: ",
                          "#FFFFFF",
                          ";
  border: 1px solid ",
                          "#38A9DB",
                          ";
  color: ",
                          "#38A9DB",
                          ";

  &:hover:not(:disabled) {
    background-color: ",
                          "#FFFFFF",
                          ";
    border: 1px solid ",
                          "#024A8F",
                          ";
    color: ",
                          "#024A8F",
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(styled.button)",
                      "foldedComponentIds": Array [
                        "sc-bZQynM",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": <Loader
                        color="#FFFFFF"
                        small={true}
                      />,
                      "disabled": false,
                      "onClick": [Function],
                      "small": true,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "color": "#FFFFFF",
                        "small": true,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "rules": Array [
                          "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                          [Function],
                          ";
  background-color: ",
                          "#38A9DB",
                          ";
  color: ",
                          "#FFFFFF",
                          ";
  transition: opacity 100ms ease-out;
  margin: ",
                          [Function],
                          ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                          "#D1D1D1",
                          ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                          "#024A8F",
                          ";
    cursor: pointer;
  }
",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "rules": Array [
                      "
  display: ",
                      [Function],
                      ";
  flex: ",
                      [Function],
                      ";
  flex-direction: ",
                      [Function],
                      "
  flex-grow: ",
                      [Function],
                      ";
  flex-shrink: ",
                      [Function],
                      ";
  flex-basis: ",
                      [Function],
                      ";
  flex-wrap: ",
                      [Function],
                      ";
  order: ",
                      [Function],
                      ";
  justify-content: ",
                      [Function],
                      ";
  align-items: ",
                      [Function],
                      ";
  align-content: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Flex",
                  "foldedComponentIds": Array [
                    "sc-eNQAEJ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fOKMvo",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 1.5rem;
  background-color: ",
                  "#FFFFFF",
                  ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fOKMvo",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-krvtoX",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
              Keyframes {
                "id": "sc-keyframes-laneLq",
                "inject": [Function],
                "name": "laneLq",
                "rules": Array [
                  "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                ],
                "toString": [Function],
              },
              " 200ms ease-out;
  animation-fill-mode: forwards;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-krvtoX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-cbkKFq",
            "isStatic": true,
            "rules": Array [
              "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
              "#070707",
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-cbkKFq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-dxgOiQ",
        "isStatic": false,
        "rules": Array [
          "
  width: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Styled(styled.div)",
      "foldedComponentIds": Array [
        "sc-kpOJdX",
      ],
      "render": [Function],
      "styledComponentId": "sc-dxgOiQ",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <ForwardRef>
              <ForwardRef>
                Bulk Inventory Update
              </ForwardRef>
              <ForwardRef
                size={14}
                weight={300}
              >
                Updating inventory for 
                3
                 row(s).
              </ForwardRef>
            </ForwardRef>
            <ForwardRef>
              <ForwardRef
                marginBottom="2rem"
              >
                <ForwardRef>
                  Action
                </ForwardRef>
                <SelectDropdown
                  full={true}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Update Manual Price",
                        "value": 0,
                      },
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      },
                    ]
                  }
                  placeholder="Select"
                  selected={
                    Object {
                      "label": "Update Pricing Status",
                      "value": 1,
                    }
                  }
                />
              </ForwardRef>
              <ForwardRef
                marginBottom="1.5rem"
              >
                <ForwardRef>
                  Pricing
                </ForwardRef>
                <Toggle
                  isChecked=""
                  onChange={[Function]}
                  size="small"
                />
              </ForwardRef>
              <ForwardRef
                justify="flex-end"
              >
                <ForwardRef
                  margin="0 1rem 0 0"
                  onClick={[MockFunction]}
                  small={true}
                >
                  Cancel
                </ForwardRef>
                <ForwardRef
                  disabled={false}
                  onClick={[Function]}
                  small={true}
                >
                  <Loader
                    color="#FFFFFF"
                    small={true}
                  />
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef
            onClick={[MockFunction]}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                <ForwardRef>
                  Bulk Inventory Update
                </ForwardRef>
                <ForwardRef
                  size={14}
                  weight={300}
                >
                  Updating inventory for 
                  3
                   row(s).
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef>
                <ForwardRef
                  marginBottom="2rem"
                >
                  <ForwardRef>
                    Action
                  </ForwardRef>
                  <SelectDropdown
                    full={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Update Manual Price",
                          "value": 0,
                        },
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      ]
                    }
                    placeholder="Select"
                    selected={
                      Object {
                        "label": "Update Pricing Status",
                        "value": 1,
                      }
                    }
                  />
                </ForwardRef>
                <ForwardRef
                  marginBottom="1.5rem"
                >
                  <ForwardRef>
                    Pricing
                  </ForwardRef>
                  <Toggle
                    isChecked=""
                    onChange={[Function]}
                    size="small"
                  />
                </ForwardRef>
                <ForwardRef
                  justify="flex-end"
                >
                  <ForwardRef
                    margin="0 1rem 0 0"
                    onClick={[MockFunction]}
                    small={true}
                  >
                    Cancel
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    small={true}
                  >
                    <Loader
                      color="#FFFFFF"
                      small={true}
                    />
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef>
                    Bulk Inventory Update
                  </ForwardRef>,
                  <ForwardRef
                    size={14}
                    weight={300}
                  >
                    Updating inventory for 
                    3
                     row(s).
                  </ForwardRef>,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Bulk Inventory Update",
                  },
                  "ref": null,
                  "rendered": "Bulk Inventory Update",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [
                      [Function],
                    ],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dUjcNx",
                      "isStatic": false,
                      "rules": Array [
                        "
    color: ",
                        [Function],
                        ";
    font-size: ",
                        [Function],
                        ";
    font-weight: ",
                        [Function],
                        ";
  ",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  margin: 0;
  margin-bottom: 0.25rem;
  color: ",
                        "#070707",
                        ";
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.h4))",
                    "foldedComponentIds": Array [
                      "sc-fjdhpX",
                      "sc-jzJRlG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dUjcNx",
                    "target": "h4",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Updating inventory for ",
                      3,
                      " row(s).",
                    ],
                    "size": 14,
                    "weight": 300,
                  },
                  "ref": null,
                  "rendered": Array [
                    "Updating inventory for ",
                    3,
                    " row(s).",
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fYiAbW",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#F8F8F8",
                    ";
  border-bottom: 1px solid ",
                    "#024A8F",
                    ";
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fYiAbW",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    marginBottom="2rem"
                  >
                    <ForwardRef>
                      Action
                    </ForwardRef>
                    <SelectDropdown
                      full={true}
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ]
                      }
                      placeholder="Select"
                      selected={
                        Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        }
                      }
                    />
                  </ForwardRef>,
                  false,
                  <ForwardRef
                    marginBottom="1.5rem"
                  >
                    <ForwardRef>
                      Pricing
                    </ForwardRef>
                    <Toggle
                      isChecked=""
                      onChange={[Function]}
                      size="small"
                    />
                  </ForwardRef>,
                  <ForwardRef
                    justify="flex-end"
                  >
                    <ForwardRef
                      margin="0 1rem 0 0"
                      onClick={[MockFunction]}
                      small={true}
                    >
                      Cancel
                    </ForwardRef>
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      small={true}
                    >
                      <Loader
                        color="#FFFFFF"
                        small={true}
                      />
                    </ForwardRef>
                  </ForwardRef>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Action
                      </ForwardRef>,
                      <SelectDropdown
                        full={true}
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Update Manual Price",
                              "value": 0,
                            },
                            Object {
                              "label": "Update Pricing Status",
                              "value": 1,
                            },
                          ]
                        }
                        placeholder="Select"
                        selected={
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          }
                        }
                      />,
                    ],
                    "marginBottom": "2rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Action",
                      },
                      "ref": null,
                      "rendered": "Action",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "full": true,
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "Update Manual Price",
                            "value": 0,
                          },
                          Object {
                            "label": "Update Pricing Status",
                            "value": 1,
                          },
                        ],
                        "placeholder": "Select",
                        "selected": Object {
                          "label": "Update Pricing Status",
                          "value": 1,
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dxgOiQ",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-dxgOiQ",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        Pricing
                      </ForwardRef>,
                      <Toggle
                        isChecked=""
                        onChange={[Function]}
                        size="small"
                      />,
                    ],
                    "marginBottom": "1.5rem",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Pricing",
                      },
                      "ref": null,
                      "rendered": "Pricing",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eilVRo",
                          "isStatic": true,
                          "rules": Array [
                            "
  display: block;
  margin-bottom: 0.5rem;
  color: ",
                            "#070707",
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eilVRo",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "isChecked": "",
                        "onChange": [Function],
                        "size": "small",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-eerKOB",
                      "isStatic": false,
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                        "
  position: relative;
",
                      ],
                    },
                    "displayName": "Styled(Styled(styled.div))",
                    "foldedComponentIds": Array [
                      "sc-kpOJdX",
                      "sc-dxgOiQ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-eerKOB",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef
                        margin="0 1rem 0 0"
                        onClick={[MockFunction]}
                        small={true}
                      >
                        Cancel
                      </ForwardRef>,
                      <ForwardRef
                        disabled={false}
                        onClick={[Function]}
                        small={true}
                      >
                        <Loader
                          color="#FFFFFF"
                          small={true}
                        />
                      </ForwardRef>,
                    ],
                    "justify": "flex-end",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Cancel",
                        "margin": "0 1rem 0 0",
                        "onClick": [MockFunction],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": "Cancel",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                            "
  background-color: ",
                            "#FFFFFF",
                            ";
  border: 1px solid ",
                            "#38A9DB",
                            ";
  color: ",
                            "#38A9DB",
                            ";

  &:hover:not(:disabled) {
    background-color: ",
                            "#FFFFFF",
                            ";
    border: 1px solid ",
                            "#024A8F",
                            ";
    color: ",
                            "#024A8F",
                            ";
  }
",
                          ],
                        },
                        "displayName": "Styled(styled.button)",
                        "foldedComponentIds": Array [
                          "sc-bZQynM",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": <Loader
                          color="#FFFFFF"
                          small={true}
                        />,
                        "disabled": false,
                        "onClick": [Function],
                        "small": true,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "color": "#FFFFFF",
                          "small": true,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "rules": Array [
                            "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                            [Function],
                            ";
  background-color: ",
                            "#38A9DB",
                            ";
  color: ",
                            "#FFFFFF",
                            ";
  transition: opacity 100ms ease-out;
  margin: ",
                            [Function],
                            ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                            "#D1D1D1",
                            ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                            "#024A8F",
                            ";
    cursor: pointer;
  }
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-hMqMXs",
                      "isStatic": false,
                      "rules": Array [
                        "
  display: ",
                        [Function],
                        ";
  flex: ",
                        [Function],
                        ";
  flex-direction: ",
                        [Function],
                        "
  flex-grow: ",
                        [Function],
                        ";
  flex-shrink: ",
                        [Function],
                        ";
  flex-basis: ",
                        [Function],
                        ";
  flex-wrap: ",
                        [Function],
                        ";
  order: ",
                        [Function],
                        ";
  justify-content: ",
                        [Function],
                        ";
  align-items: ",
                        [Function],
                        ";
  align-content: ",
                        [Function],
                        ";
  align-self: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  width: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Flex",
                    "foldedComponentIds": Array [
                      "sc-eNQAEJ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-hMqMXs",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fOKMvo",
                  "isStatic": true,
                  "rules": Array [
                    "
  padding: 1.5rem;
  background-color: ",
                    "#FFFFFF",
                    ";
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-fOKMvo",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 350px;
  z-index: 9;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.27);
  animation: ",
                Keyframes {
                  "id": "sc-keyframes-laneLq",
                  "inject": [Function],
                  "name": "laneLq",
                  "rules": Array [
                    "@-webkit-keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                    "@keyframes laneLq{0%{opacity:0;-webkit-transform:translate(-50%,-20%);-ms-transform:translate(-50%,-20%);transform:translate(-50%,-20%);}100%{opacity:1;}}",
                  ],
                  "toString": [Function],
                },
                " 200ms ease-out;
  animation-fill-mode: forwards;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-cbkKFq",
              "isStatic": true,
              "rules": Array [
                "
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.3;
  background-color: ",
                "#070707",
                ";
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-cbkKFq",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dxgOiQ",
          "isStatic": false,
          "rules": Array [
            "
  width: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Styled(styled.div)",
        "foldedComponentIds": Array [
          "sc-kpOJdX",
        ],
        "render": [Function],
        "styledComponentId": "sc-dxgOiQ",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
