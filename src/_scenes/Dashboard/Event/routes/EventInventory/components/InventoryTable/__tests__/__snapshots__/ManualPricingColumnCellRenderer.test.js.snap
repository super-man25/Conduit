// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ManualPricingColumnCellRenderer /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ManualPricingCellPresenter
    cancelEditingManualPrice={[MockFunction]}
    cellData={null}
    isEditing={false}
    manualPriceLocked={false}
    rowData={
      Object {
        "listedPrice": 12,
      }
    }
    setEditingManualPrice={[MockFunction]}
    setManualPrice={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "align": "center",
      "children": Array [
        false,
        <ForwardRef
          color="#38A9DB"
          cursor="pointer"
          onClick={[Function]}
          opacity={1}
          overflow={true}
          size={14}
          title="SET PRICE"
        >
          SET PRICE
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "SET PRICE",
          "color": "#38A9DB",
          "cursor": "pointer",
          "onClick": [Function],
          "opacity": 1,
          "overflow": true,
          "size": 14,
          "title": "SET PRICE",
        },
        "ref": null,
        "rendered": "SET PRICE",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jKJlTe",
            "isStatic": false,
            "rules": Array [
              "
  font-size: ",
              [Function],
              ";
  font-weight: ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  margin: ",
              [Function],
              ";
  text-align: ",
              [Function],
              ";
  opacity: ",
              [Function],
              ";
  cursor: ",
              [Function],
              ";

  ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Styled(styled.p)",
          "foldedComponentIds": Array [
            "sc-ckVGcZ",
          ],
          "render": [Function],
          "styledComponentId": "sc-jKJlTe",
          "target": "p",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-hMqMXs",
        "isStatic": false,
        "rules": Array [
          "
  display: ",
          [Function],
          ";
  flex: ",
          [Function],
          ";
  flex-direction: ",
          [Function],
          "
  flex-grow: ",
          [Function],
          ";
  flex-shrink: ",
          [Function],
          ";
  flex-basis: ",
          [Function],
          ";
  flex-wrap: ",
          [Function],
          ";
  order: ",
          [Function],
          ";
  justify-content: ",
          [Function],
          ";
  align-items: ",
          [Function],
          ";
  align-content: ",
          [Function],
          ";
  align-self: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
  width: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Flex",
      "foldedComponentIds": Array [
        "sc-eNQAEJ",
      ],
      "render": [Function],
      "styledComponentId": "sc-hMqMXs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "align": "center",
        "children": Array [
          false,
          <ForwardRef
            color="#38A9DB"
            cursor="pointer"
            onClick={[Function]}
            opacity={1}
            overflow={true}
            size={14}
            title="SET PRICE"
          >
            SET PRICE
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "SET PRICE",
            "color": "#38A9DB",
            "cursor": "pointer",
            "onClick": [Function],
            "opacity": 1,
            "overflow": true,
            "size": 14,
            "title": "SET PRICE",
          },
          "ref": null,
          "rendered": "SET PRICE",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "rules": Array [
                "
  font-size: ",
                [Function],
                ";
  font-weight: ",
                [Function],
                ";
  color: ",
                [Function],
                ";
  margin: ",
                [Function],
                ";
  text-align: ",
                [Function],
                ";
  opacity: ",
                [Function],
                ";
  cursor: ",
                [Function],
                ";

  ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
              ],
            },
            "displayName": "Styled(styled.p)",
            "foldedComponentIds": Array [
              "sc-ckVGcZ",
            ],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-hMqMXs",
          "isStatic": false,
          "rules": Array [
            "
  display: ",
            [Function],
            ";
  flex: ",
            [Function],
            ";
  flex-direction: ",
            [Function],
            "
  flex-grow: ",
            [Function],
            ";
  flex-shrink: ",
            [Function],
            ";
  flex-basis: ",
            [Function],
            ";
  flex-wrap: ",
            [Function],
            ";
  order: ",
            [Function],
            ";
  justify-content: ",
            [Function],
            ";
  align-items: ",
            [Function],
            ";
  align-content: ",
            [Function],
            ";
  align-self: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
  width: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Flex",
        "foldedComponentIds": Array [
          "sc-eNQAEJ",
        ],
        "render": [Function],
        "styledComponentId": "sc-hMqMXs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<ManualPricingColumnCellRenderer /> should render correctly when isEditing is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ManualPricingCellPresenter
    cancelEditingManualPrice={[MockFunction]}
    cellData={null}
    isEditing={true}
    manualPriceLocked={false}
    rowData={
      Object {
        "listedPrice": 12,
      }
    }
    setEditingManualPrice={[MockFunction]}
    setManualPrice={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "align": "center",
      "children": Array [
        <NumberInputField
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [
                [Function],
              ],
              "componentStyle": ComponentStyle {
                "componentId": "sc-cbkKFq",
                "isStatic": false,
                "rules": Array [
                  "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                  [Function],
                  ";
  background-image: ",
                  [Function],
                  ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                  [Function],
                  ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                  [Function],
                  ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                  [Function],
                  ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                  "#999999",
                  ";
  }
",
                  "
  box-sizing: border-box;
  margin: 0 0.5rem 0 0;
  padding: 10px 8px;
  max-height: 35px;
  max-width: 80px;
",
                ],
              },
              "displayName": "Styled(styled.input)",
              "foldedComponentIds": Array [
                "sc-jWBwVP",
              ],
              "render": [Function],
              "styledComponentId": "sc-cbkKFq",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          onChange={[Function]}
          placeholder="$12.00"
          value=""
        />,
        <ForwardRef
          onClick={[Function]}
        >
          Set Price
        </ForwardRef>,
        <ForwardRef>
          <ClearIcon
            fill="#000"
            height="24px"
            onClick={[Function]}
            styles={
              Object {
                "cursor": "pointer",
                "marginLeft": 7,
              }
            }
            width="24px"
          />
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "sc-cbkKFq",
              "isStatic": false,
              "rules": Array [
                "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                [Function],
                ";
  background-image: ",
                [Function],
                ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                [Function],
                ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                [Function],
                ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                [Function],
                ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                "#999999",
                ";
  }
",
                "
  box-sizing: border-box;
  margin: 0 0.5rem 0 0;
  padding: 10px 8px;
  max-height: 35px;
  max-width: 80px;
",
              ],
            },
            "displayName": "Styled(styled.input)",
            "foldedComponentIds": Array [
              "sc-jWBwVP",
            ],
            "render": [Function],
            "styledComponentId": "sc-cbkKFq",
            "target": "input",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "onChange": [Function],
          "placeholder": "$12.00",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Set Price",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Set Price",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            [Function],
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-krvtoX",
            "isStatic": false,
            "rules": Array [
              "
  display: ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  font-size: ",
              [Function],
              ";
  font-weight: 200;
  width: ",
              [Function],
              ";
  margin: 0;
  margin-top: ",
              [Function],
              ";
  margin-bottom: ",
              [Function],
              ";
  margin-right: ",
              [Function],
              ";
  padding: ",
              [Function],
              ";
  padding-top: ",
              [Function],
              ";
  padding-bottom: ",
              [Function],
              ";
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  &:hover {
    cursor: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
    background-color: ",
              [Function],
              ";
    border-color: ",
              [Function],
              ";
  }

  &::before {
    content: '",
              [Function],
              "';
  }
",
              "
  box-sizing: border-box;
  margin: 0;
  max-width: 80px;
  max-height: 35px;
",
            ],
          },
          "displayName": "Styled(styled.button)",
          "foldedComponentIds": Array [
            "sc-dnqmqq",
          ],
          "render": [Function],
          "styledComponentId": "sc-krvtoX",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ClearIcon
            fill="#000"
            height="24px"
            onClick={[Function]}
            styles={
              Object {
                "cursor": "pointer",
                "marginLeft": 7,
              }
            }
            width="24px"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "fill": "#000",
            "height": "24px",
            "onClick": [Function],
            "styles": Object {
              "cursor": "pointer",
              "marginLeft": 7,
            },
            "width": "24px",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-hMqMXs",
            "isStatic": false,
            "rules": Array [
              "
  display: ",
              [Function],
              ";
  flex: ",
              [Function],
              ";
  flex-direction: ",
              [Function],
              "
  flex-grow: ",
              [Function],
              ";
  flex-shrink: ",
              [Function],
              ";
  flex-basis: ",
              [Function],
              ";
  flex-wrap: ",
              [Function],
              ";
  order: ",
              [Function],
              ";
  justify-content: ",
              [Function],
              ";
  align-items: ",
              [Function],
              ";
  align-content: ",
              [Function],
              ";
  align-self: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Flex",
          "foldedComponentIds": Array [
            "sc-eNQAEJ",
          ],
          "render": [Function],
          "styledComponentId": "sc-hMqMXs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-hMqMXs",
        "isStatic": false,
        "rules": Array [
          "
  display: ",
          [Function],
          ";
  flex: ",
          [Function],
          ";
  flex-direction: ",
          [Function],
          "
  flex-grow: ",
          [Function],
          ";
  flex-shrink: ",
          [Function],
          ";
  flex-basis: ",
          [Function],
          ";
  flex-wrap: ",
          [Function],
          ";
  order: ",
          [Function],
          ";
  justify-content: ",
          [Function],
          ";
  align-items: ",
          [Function],
          ";
  align-content: ",
          [Function],
          ";
  align-self: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
  width: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Flex",
      "foldedComponentIds": Array [
        "sc-eNQAEJ",
      ],
      "render": [Function],
      "styledComponentId": "sc-hMqMXs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "align": "center",
        "children": Array [
          <NumberInputField
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-cbkKFq",
                  "isStatic": false,
                  "rules": Array [
                    "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                    [Function],
                    ";
  background-image: ",
                    [Function],
                    ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                    [Function],
                    ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                    [Function],
                    ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                    [Function],
                    ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                    "#999999",
                    ";
  }
",
                    "
  box-sizing: border-box;
  margin: 0 0.5rem 0 0;
  padding: 10px 8px;
  max-height: 35px;
  max-width: 80px;
",
                  ],
                },
                "displayName": "Styled(styled.input)",
                "foldedComponentIds": Array [
                  "sc-jWBwVP",
                ],
                "render": [Function],
                "styledComponentId": "sc-cbkKFq",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            onChange={[Function]}
            placeholder="$12.00"
            value=""
          />,
          <ForwardRef
            onClick={[Function]}
          >
            Set Price
          </ForwardRef>,
          <ForwardRef>
            <ClearIcon
              fill="#000"
              height="24px"
              onClick={[Function]}
              styles={
                Object {
                  "cursor": "pointer",
                  "marginLeft": 7,
                }
              }
              width="24px"
            />
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [
                [Function],
              ],
              "componentStyle": ComponentStyle {
                "componentId": "sc-cbkKFq",
                "isStatic": false,
                "rules": Array [
                  "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                  [Function],
                  ";
  background-image: ",
                  [Function],
                  ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                  [Function],
                  ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                  [Function],
                  ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                  [Function],
                  ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                  "#999999",
                  ";
  }
",
                  "
  box-sizing: border-box;
  margin: 0 0.5rem 0 0;
  padding: 10px 8px;
  max-height: 35px;
  max-width: 80px;
",
                ],
              },
              "displayName": "Styled(styled.input)",
              "foldedComponentIds": Array [
                "sc-jWBwVP",
              ],
              "render": [Function],
              "styledComponentId": "sc-cbkKFq",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
            "onChange": [Function],
            "placeholder": "$12.00",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Set Price",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Set Price",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": false,
              "rules": Array [
                "
  display: ",
                [Function],
                ";
  color: ",
                [Function],
                ";
  font-size: ",
                [Function],
                ";
  font-weight: 200;
  width: ",
                [Function],
                ";
  margin: 0;
  margin-top: ",
                [Function],
                ";
  margin-bottom: ",
                [Function],
                ";
  margin-right: ",
                [Function],
                ";
  padding: ",
                [Function],
                ";
  padding-top: ",
                [Function],
                ";
  padding-bottom: ",
                [Function],
                ";
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                [Function],
                ";
  background-color: ",
                [Function],
                ";
  &:hover {
    cursor: ",
                [Function],
                ";
    color: ",
                [Function],
                ";
    background-color: ",
                [Function],
                ";
    border-color: ",
                [Function],
                ";
  }

  &::before {
    content: '",
                [Function],
                "';
  }
",
                "
  box-sizing: border-box;
  margin: 0;
  max-width: 80px;
  max-height: 35px;
",
              ],
            },
            "displayName": "Styled(styled.button)",
            "foldedComponentIds": Array [
              "sc-dnqmqq",
            ],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "button",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ClearIcon
              fill="#000"
              height="24px"
              onClick={[Function]}
              styles={
                Object {
                  "cursor": "pointer",
                  "marginLeft": 7,
                }
              }
              width="24px"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "fill": "#000",
              "height": "24px",
              "onClick": [Function],
              "styles": Object {
                "cursor": "pointer",
                "marginLeft": 7,
              },
              "width": "24px",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hMqMXs",
              "isStatic": false,
              "rules": Array [
                "
  display: ",
                [Function],
                ";
  flex: ",
                [Function],
                ";
  flex-direction: ",
                [Function],
                "
  flex-grow: ",
                [Function],
                ";
  flex-shrink: ",
                [Function],
                ";
  flex-basis: ",
                [Function],
                ";
  flex-wrap: ",
                [Function],
                ";
  order: ",
                [Function],
                ";
  justify-content: ",
                [Function],
                ";
  align-items: ",
                [Function],
                ";
  align-content: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
              ],
            },
            "displayName": "Flex",
            "foldedComponentIds": Array [
              "sc-eNQAEJ",
            ],
            "render": [Function],
            "styledComponentId": "sc-hMqMXs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-hMqMXs",
          "isStatic": false,
          "rules": Array [
            "
  display: ",
            [Function],
            ";
  flex: ",
            [Function],
            ";
  flex-direction: ",
            [Function],
            "
  flex-grow: ",
            [Function],
            ";
  flex-shrink: ",
            [Function],
            ";
  flex-basis: ",
            [Function],
            ";
  flex-wrap: ",
            [Function],
            ";
  order: ",
            [Function],
            ";
  justify-content: ",
            [Function],
            ";
  align-items: ",
            [Function],
            ";
  align-content: ",
            [Function],
            ";
  align-self: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
  width: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Flex",
        "foldedComponentIds": Array [
          "sc-eNQAEJ",
        ],
        "render": [Function],
        "styledComponentId": "sc-hMqMXs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<ManualPricingColumnCellRenderer /> should render correctly when manualPriceLocked is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ManualPricingCellPresenter
    cancelEditingManualPrice={[MockFunction]}
    cellData={null}
    isEditing={false}
    manualPriceLocked={true}
    rowData={
      Object {
        "listedPrice": 12,
      }
    }
    setEditingManualPrice={[MockFunction]}
    setManualPrice={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "align": "center",
      "children": Array [
        false,
        <ForwardRef
          color="#38A9DB"
          cursor="pointer"
          onClick={[Function]}
          opacity={0.5}
          overflow={true}
          size={14}
          title="SET PRICE"
        >
          SET PRICE
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "SET PRICE",
          "color": "#38A9DB",
          "cursor": "pointer",
          "onClick": [Function],
          "opacity": 0.5,
          "overflow": true,
          "size": 14,
          "title": "SET PRICE",
        },
        "ref": null,
        "rendered": "SET PRICE",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jKJlTe",
            "isStatic": false,
            "rules": Array [
              "
  font-size: ",
              [Function],
              ";
  font-weight: ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  margin: ",
              [Function],
              ";
  text-align: ",
              [Function],
              ";
  opacity: ",
              [Function],
              ";
  cursor: ",
              [Function],
              ";

  ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Styled(styled.p)",
          "foldedComponentIds": Array [
            "sc-ckVGcZ",
          ],
          "render": [Function],
          "styledComponentId": "sc-jKJlTe",
          "target": "p",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-hMqMXs",
        "isStatic": false,
        "rules": Array [
          "
  display: ",
          [Function],
          ";
  flex: ",
          [Function],
          ";
  flex-direction: ",
          [Function],
          "
  flex-grow: ",
          [Function],
          ";
  flex-shrink: ",
          [Function],
          ";
  flex-basis: ",
          [Function],
          ";
  flex-wrap: ",
          [Function],
          ";
  order: ",
          [Function],
          ";
  justify-content: ",
          [Function],
          ";
  align-items: ",
          [Function],
          ";
  align-content: ",
          [Function],
          ";
  align-self: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
  width: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Flex",
      "foldedComponentIds": Array [
        "sc-eNQAEJ",
      ],
      "render": [Function],
      "styledComponentId": "sc-hMqMXs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "align": "center",
        "children": Array [
          false,
          <ForwardRef
            color="#38A9DB"
            cursor="pointer"
            onClick={[Function]}
            opacity={0.5}
            overflow={true}
            size={14}
            title="SET PRICE"
          >
            SET PRICE
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "SET PRICE",
            "color": "#38A9DB",
            "cursor": "pointer",
            "onClick": [Function],
            "opacity": 0.5,
            "overflow": true,
            "size": 14,
            "title": "SET PRICE",
          },
          "ref": null,
          "rendered": "SET PRICE",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "rules": Array [
                "
  font-size: ",
                [Function],
                ";
  font-weight: ",
                [Function],
                ";
  color: ",
                [Function],
                ";
  margin: ",
                [Function],
                ";
  text-align: ",
                [Function],
                ";
  opacity: ",
                [Function],
                ";
  cursor: ",
                [Function],
                ";

  ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
              ],
            },
            "displayName": "Styled(styled.p)",
            "foldedComponentIds": Array [
              "sc-ckVGcZ",
            ],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-hMqMXs",
          "isStatic": false,
          "rules": Array [
            "
  display: ",
            [Function],
            ";
  flex: ",
            [Function],
            ";
  flex-direction: ",
            [Function],
            "
  flex-grow: ",
            [Function],
            ";
  flex-shrink: ",
            [Function],
            ";
  flex-basis: ",
            [Function],
            ";
  flex-wrap: ",
            [Function],
            ";
  order: ",
            [Function],
            ";
  justify-content: ",
            [Function],
            ";
  align-items: ",
            [Function],
            ";
  align-content: ",
            [Function],
            ";
  align-self: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
  width: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Flex",
        "foldedComponentIds": Array [
          "sc-eNQAEJ",
        ],
        "render": [Function],
        "styledComponentId": "sc-hMqMXs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<ManualPricingColumnCellRenderer /> should render correctly when the cellData has a value 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ManualPricingCellPresenter
    cancelEditingManualPrice={[MockFunction]}
    cellData={12}
    isEditing={false}
    manualPriceLocked={false}
    rowData={
      Object {
        "listedPrice": 12,
      }
    }
    setEditingManualPrice={[MockFunction]}
    setManualPrice={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "align": "center",
      "children": Array [
        <ForwardRef
          color="#38A9DB"
          cursor="pointer"
          marginLeft="1rem"
          onClick={[Function]}
          size={14}
        >
          $12.00
        </ForwardRef>,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "$12.00",
          "color": "#38A9DB",
          "cursor": "pointer",
          "marginLeft": "1rem",
          "onClick": [Function],
          "size": 14,
        },
        "ref": null,
        "rendered": "$12.00",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jKJlTe",
            "isStatic": false,
            "rules": Array [
              "
  font-size: ",
              [Function],
              ";
  font-weight: ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  margin: ",
              [Function],
              ";
  text-align: ",
              [Function],
              ";
  opacity: ",
              [Function],
              ";
  cursor: ",
              [Function],
              ";

  ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Styled(styled.p)",
          "foldedComponentIds": Array [
            "sc-ckVGcZ",
          ],
          "render": [Function],
          "styledComponentId": "sc-jKJlTe",
          "target": "p",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      false,
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-hMqMXs",
        "isStatic": false,
        "rules": Array [
          "
  display: ",
          [Function],
          ";
  flex: ",
          [Function],
          ";
  flex-direction: ",
          [Function],
          "
  flex-grow: ",
          [Function],
          ";
  flex-shrink: ",
          [Function],
          ";
  flex-basis: ",
          [Function],
          ";
  flex-wrap: ",
          [Function],
          ";
  order: ",
          [Function],
          ";
  justify-content: ",
          [Function],
          ";
  align-items: ",
          [Function],
          ";
  align-content: ",
          [Function],
          ";
  align-self: ",
          [Function],
          ";
  height: ",
          [Function],
          ";
  width: ",
          [Function],
          ";
",
          "
    margin: ",
          [Function],
          ";
    margin-top: ",
          [Function],
          ";
    margin-bottom: ",
          [Function],
          ";
    margin-left: ",
          [Function],
          ";
    margin-right: ",
          [Function],
          ";

    padding: ",
          [Function],
          ";
    padding-top: ",
          [Function],
          ";
    padding-bottom: ",
          [Function],
          ";
    padding-left: ",
          [Function],
          ";
    padding-right: ",
          [Function],
          ";

    border: ",
          [Function],
          ";
    border-top: ",
          [Function],
          ";
    border-bottom: ",
          [Function],
          ";
    border-left: ",
          [Function],
          ";
    border-right: ",
          [Function],
          ";
  ",
        ],
      },
      "displayName": "Flex",
      "foldedComponentIds": Array [
        "sc-eNQAEJ",
      ],
      "render": [Function],
      "styledComponentId": "sc-hMqMXs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "align": "center",
        "children": Array [
          <ForwardRef
            color="#38A9DB"
            cursor="pointer"
            marginLeft="1rem"
            onClick={[Function]}
            size={14}
          >
            $12.00
          </ForwardRef>,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "$12.00",
            "color": "#38A9DB",
            "cursor": "pointer",
            "marginLeft": "1rem",
            "onClick": [Function],
            "size": 14,
          },
          "ref": null,
          "rendered": "$12.00",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "rules": Array [
                "
  font-size: ",
                [Function],
                ";
  font-weight: ",
                [Function],
                ";
  color: ",
                [Function],
                ";
  margin: ",
                [Function],
                ";
  text-align: ",
                [Function],
                ";
  opacity: ",
                [Function],
                ";
  cursor: ",
                [Function],
                ";

  ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
              ],
            },
            "displayName": "Styled(styled.p)",
            "foldedComponentIds": Array [
              "sc-ckVGcZ",
            ],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        false,
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-hMqMXs",
          "isStatic": false,
          "rules": Array [
            "
  display: ",
            [Function],
            ";
  flex: ",
            [Function],
            ";
  flex-direction: ",
            [Function],
            "
  flex-grow: ",
            [Function],
            ";
  flex-shrink: ",
            [Function],
            ";
  flex-basis: ",
            [Function],
            ";
  flex-wrap: ",
            [Function],
            ";
  order: ",
            [Function],
            ";
  justify-content: ",
            [Function],
            ";
  align-items: ",
            [Function],
            ";
  align-content: ",
            [Function],
            ";
  align-self: ",
            [Function],
            ";
  height: ",
            [Function],
            ";
  width: ",
            [Function],
            ";
",
            "
    margin: ",
            [Function],
            ";
    margin-top: ",
            [Function],
            ";
    margin-bottom: ",
            [Function],
            ";
    margin-left: ",
            [Function],
            ";
    margin-right: ",
            [Function],
            ";

    padding: ",
            [Function],
            ";
    padding-top: ",
            [Function],
            ";
    padding-bottom: ",
            [Function],
            ";
    padding-left: ",
            [Function],
            ";
    padding-right: ",
            [Function],
            ";

    border: ",
            [Function],
            ";
    border-top: ",
            [Function],
            ";
    border-bottom: ",
            [Function],
            ";
    border-left: ",
            [Function],
            ";
    border-right: ",
            [Function],
            ";
  ",
          ],
        },
        "displayName": "Flex",
        "foldedComponentIds": Array [
          "sc-eNQAEJ",
        ],
        "render": [Function],
        "styledComponentId": "sc-hMqMXs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
