// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Event /> index route should render correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EventRoute
    eventState={
        Object {
            "error": null,
            "event": Object {
              "id": 1,
            },
            "loading": false,
          }
    }
    fetchEvent={[Function]}
    match={
        Object {
            "params": Object {
              "id": 1,
            },
          }
    }
    replace={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Route
          component={[Function]}
          path="/event/:id/inventory"
/>,
        <Route
          component={[Function]}
          path="/event/:id"
/>,
        <Redirect
          push={false}
          to="/season"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "path": "/event/:id/inventory",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "path": "/event/:id",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "push": false,
          "to": "/season",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Route
            component={[Function]}
            path="/event/:id/inventory"
/>,
          <Route
            component={[Function]}
            path="/event/:id"
/>,
          <Redirect
            push={false}
            to="/season"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "path": "/event/:id/inventory",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "path": "/event/:id",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "push": false,
            "to": "/season",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<Event /> index route should render correctly when loading is true 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EventRoute
    eventState={
        Object {
            "error": null,
            "event": Object {
              "id": 1,
            },
            "loading": true,
          }
    }
    fetchEvent={[Function]}
    match={
        Object {
            "params": Object {
              "id": 1,
            },
          }
    }
    replace={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <CenteredLoader />,
      "style": Object {
        "height": "100%",
        "position": "relative",
        "width": "100%",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <CenteredLoader />,
        "style": Object {
          "height": "100%",
          "position": "relative",
          "width": "100%",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
