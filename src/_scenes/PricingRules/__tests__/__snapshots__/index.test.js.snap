// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PricingRules /> index route should render corectly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PricingRules
    buyerTypeActions={
      Object {
        "fetchBuyerTypes": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "openBuyerTypesModal": [MockFunction],
      }
    }
    buyerTypes={Array []}
    editingAnyPriceRule={false}
    priceRuleActions={
      Object {
        "createPriceRule": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Connect(SiteHeaderPresenter) />,
        <ForwardRef>
          <ForwardRef>
            <ForwardRef
              margin="1rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/pricing",
                      "title": "Team Settings",
                    },
                  ]
                }
              />
              <ForwardRef
                align="baseline"
                direction="row"
                justify="space-between"
              >
                <ForwardRef
                  type="secondary"
                >
                  Pricing Rules
                </ForwardRef>
                <div>
                  <ForwardRef
                    disabled={true}
                    onClick={[MockFunction]}
                  >
                    Buyer Types
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                        "marginLeft": "2rem",
                      }
                    }
                  >
                    New Rule
                  </ForwardRef>
                </div>
              </ForwardRef>
            </ForwardRef>
            <ForwardRef
              flex={1}
            >
              <Connect(VirtualizedPricingRulesPresenter) />
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>,
        <Portal />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ForwardRef>
            <ForwardRef
              margin="1rem 0"
            >
              <Breadcrumbs
                crumbs={
                  Array [
                    Object {
                      "path": "/dashboard",
                      "title": "Dashboard",
                    },
                    Object {
                      "path": "/pricing",
                      "title": "Team Settings",
                    },
                  ]
                }
              />
              <ForwardRef
                align="baseline"
                direction="row"
                justify="space-between"
              >
                <ForwardRef
                  type="secondary"
                >
                  Pricing Rules
                </ForwardRef>
                <div>
                  <ForwardRef
                    disabled={true}
                    onClick={[MockFunction]}
                  >
                    Buyer Types
                  </ForwardRef>
                  <ForwardRef
                    disabled={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                        "marginLeft": "2rem",
                      }
                    }
                  >
                    New Rule
                  </ForwardRef>
                </div>
              </ForwardRef>
            </ForwardRef>
            <ForwardRef
              flex={1}
            >
              <Connect(VirtualizedPricingRulesPresenter) />
            </ForwardRef>
          </ForwardRef>,
          "scrollLocked": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                margin="1rem 0"
              >
                <Breadcrumbs
                  crumbs={
                    Array [
                      Object {
                        "path": "/dashboard",
                        "title": "Dashboard",
                      },
                      Object {
                        "path": "/pricing",
                        "title": "Team Settings",
                      },
                    ]
                  }
                />
                <ForwardRef
                  align="baseline"
                  direction="row"
                  justify="space-between"
                >
                  <ForwardRef
                    type="secondary"
                  >
                    Pricing Rules
                  </ForwardRef>
                  <div>
                    <ForwardRef
                      disabled={true}
                      onClick={[MockFunction]}
                    >
                      Buyer Types
                    </ForwardRef>
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                          "marginLeft": "2rem",
                        }
                      }
                    >
                      New Rule
                    </ForwardRef>
                  </div>
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef
                flex={1}
              >
                <Connect(VirtualizedPricingRulesPresenter) />
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Breadcrumbs
                    crumbs={
                      Array [
                        Object {
                          "path": "/dashboard",
                          "title": "Dashboard",
                        },
                        Object {
                          "path": "/pricing",
                          "title": "Team Settings",
                        },
                      ]
                    }
                  />,
                  <ForwardRef
                    align="baseline"
                    direction="row"
                    justify="space-between"
                  >
                    <ForwardRef
                      type="secondary"
                    >
                      Pricing Rules
                    </ForwardRef>
                    <div>
                      <ForwardRef
                        disabled={true}
                        onClick={[MockFunction]}
                      >
                        Buyer Types
                      </ForwardRef>
                      <ForwardRef
                        disabled={false}
                        onClick={[Function]}
                        style={
                          Object {
                            "cursor": "pointer",
                            "marginLeft": "2rem",
                          }
                        }
                      >
                        New Rule
                      </ForwardRef>
                    </div>
                  </ForwardRef>,
                ],
                "margin": "1rem 0",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "crumbs": Array [
                      Object {
                        "path": "/dashboard",
                        "title": "Dashboard",
                      },
                      Object {
                        "path": "/pricing",
                        "title": "Team Settings",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "align": "baseline",
                    "children": Array [
                      <ForwardRef
                        type="secondary"
                      >
                        Pricing Rules
                      </ForwardRef>,
                      <div>
                        <ForwardRef
                          disabled={true}
                          onClick={[MockFunction]}
                        >
                          Buyer Types
                        </ForwardRef>
                        <ForwardRef
                          disabled={false}
                          onClick={[Function]}
                          style={
                            Object {
                              "cursor": "pointer",
                              "marginLeft": "2rem",
                            }
                          }
                        >
                          New Rule
                        </ForwardRef>
                      </div>,
                    ],
                    "direction": "row",
                    "justify": "space-between",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Pricing Rules",
                        "type": "secondary",
                      },
                      "ref": null,
                      "rendered": "Pricing Rules",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jTzLTM",
                          "isStatic": false,
                          "rules": Array [
                            "
  color: ",
                            [Function],
                            "
  font-size: ",
                            [Function],
                            ";
  font-weight: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.h3",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jTzLTM",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <ForwardRef
                            disabled={true}
                            onClick={[MockFunction]}
                          >
                            Buyer Types
                          </ForwardRef>,
                          <ForwardRef
                            disabled={false}
                            onClick={[Function]}
                            style={
                              Object {
                                "cursor": "pointer",
                                "marginLeft": "2rem",
                              }
                            }
                          >
                            New Rule
                          </ForwardRef>,
                        ],
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "children": "Buyer Types",
                            "disabled": true,
                            "onClick": [MockFunction],
                          },
                          "ref": null,
                          "rendered": "Buyer Types",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-gzVnrw",
                              "isStatic": false,
                              "rules": Array [
                                "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                                [Function],
                                ";
  background-color: ",
                                "#38A9DB",
                                ";
  color: ",
                                "#FFFFFF",
                                ";
  transition: opacity 100ms ease-out;
  margin: ",
                                [Function],
                                ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                                "#D1D1D1",
                                ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                                "#024A8F",
                                ";
    cursor: pointer;
  }
",
                                "
  background-color: ",
                                "#FFFFFF",
                                ";
  border: 1px solid ",
                                "#38A9DB",
                                ";
  color: ",
                                "#38A9DB",
                                ";

  &:hover:not(:disabled) {
    background-color: ",
                                "#FFFFFF",
                                ";
    border: 1px solid ",
                                "#024A8F",
                                ";
    color: ",
                                "#024A8F",
                                ";
  }
",
                              ],
                            },
                            "displayName": "Styled(styled.button)",
                            "foldedComponentIds": Array [
                              "sc-bZQynM",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-gzVnrw",
                            "target": "button",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "children": "New Rule",
                            "disabled": false,
                            "onClick": [Function],
                            "style": Object {
                              "cursor": "pointer",
                              "marginLeft": "2rem",
                            },
                          },
                          "ref": null,
                          "rendered": "New Rule",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bZQynM",
                              "isStatic": false,
                              "rules": Array [
                                "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                                [Function],
                                ";
  background-color: ",
                                "#38A9DB",
                                ";
  color: ",
                                "#FFFFFF",
                                ";
  transition: opacity 100ms ease-out;
  margin: ",
                                [Function],
                                ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                                "#D1D1D1",
                                ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                                "#024A8F",
                                ";
    cursor: pointer;
  }
",
                              ],
                            },
                            "displayName": "styled.button",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bZQynM",
                            "target": "button",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-hMqMXs",
                      "isStatic": false,
                      "rules": Array [
                        "
  display: ",
                        [Function],
                        ";
  flex: ",
                        [Function],
                        ";
  flex-direction: ",
                        [Function],
                        "
  flex-grow: ",
                        [Function],
                        ";
  flex-shrink: ",
                        [Function],
                        ";
  flex-basis: ",
                        [Function],
                        ";
  flex-wrap: ",
                        [Function],
                        ";
  order: ",
                        [Function],
                        ";
  justify-content: ",
                        [Function],
                        ";
  align-items: ",
                        [Function],
                        ";
  align-content: ",
                        [Function],
                        ";
  align-self: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  width: ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Flex",
                    "foldedComponentIds": Array [
                      "sc-eNQAEJ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-hMqMXs",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ksYbfQ",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ksYbfQ",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Connect(VirtualizedPricingRulesPresenter) />,
                "flex": 1,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-itybZL",
                  "isStatic": false,
                  "rules": Array [
                    "
  flex: ",
                    [Function],
                    ";
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  align-self: ",
                    [Function],
                    ";
  margin: ",
                    [Function],
                    ";
  padding: ",
                    [Function],
                    ";
",
                    "
  min-height: 100%;
",
                  ],
                },
                "defaultProps": Object {
                  "flex": 1,
                },
                "displayName": "Styled(FlexItem)",
                "foldedComponentIds": Array [
                  "sc-kEYyzF",
                ],
                "render": [Function],
                "styledComponentId": "sc-itybZL",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-dTdPqK",
              "isStatic": false,
              "rules": Array [
                "
  display: ",
                [Function],
                ";
  flex: ",
                [Function],
                ";
  flex-direction: ",
                [Function],
                "
  flex-grow: ",
                [Function],
                ";
  flex-shrink: ",
                [Function],
                ";
  flex-basis: ",
                [Function],
                ";
  flex-wrap: ",
                [Function],
                ";
  order: ",
                [Function],
                ";
  justify-content: ",
                [Function],
                ";
  align-items: ",
                [Function],
                ";
  align-content: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
                "
  flex-direction: column;
  justify-content: center;
  padding: 6rem 4rem;
  width: 100%;
",
              ],
            },
            "displayName": "Styled(Flex)",
            "foldedComponentIds": Array [
              "sc-eNQAEJ",
              "sc-hMqMXs",
            ],
            "render": [Function],
            "styledComponentId": "sc-dTdPqK",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-eMigcr",
            "isStatic": false,
            "rules": Array [
              "
  display: flex;
  position: absolute;
  top: 5rem;
  bottom: 0;
  left: 0;
  right: 0;
",
              "
  overflow: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(styled.div)",
          "foldedComponentIds": Array [
            "sc-eTuwsz",
          ],
          "render": [Function],
          "styledComponentId": "sc-eMigcr",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bwCtUz",
        "isStatic": true,
        "rules": Array [
          "
  height: 100%;
  width: 100%;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bwCtUz",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Connect(SiteHeaderPresenter) />,
          <ForwardRef>
            <ForwardRef>
              <ForwardRef
                margin="1rem 0"
              >
                <Breadcrumbs
                  crumbs={
                    Array [
                      Object {
                        "path": "/dashboard",
                        "title": "Dashboard",
                      },
                      Object {
                        "path": "/pricing",
                        "title": "Team Settings",
                      },
                    ]
                  }
                />
                <ForwardRef
                  align="baseline"
                  direction="row"
                  justify="space-between"
                >
                  <ForwardRef
                    type="secondary"
                  >
                    Pricing Rules
                  </ForwardRef>
                  <div>
                    <ForwardRef
                      disabled={true}
                      onClick={[MockFunction]}
                    >
                      Buyer Types
                    </ForwardRef>
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                          "marginLeft": "2rem",
                        }
                      }
                    >
                      New Rule
                    </ForwardRef>
                  </div>
                </ForwardRef>
              </ForwardRef>
              <ForwardRef
                flex={1}
              >
                <Connect(VirtualizedPricingRulesPresenter) />
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <Portal />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef>
              <ForwardRef
                margin="1rem 0"
              >
                <Breadcrumbs
                  crumbs={
                    Array [
                      Object {
                        "path": "/dashboard",
                        "title": "Dashboard",
                      },
                      Object {
                        "path": "/pricing",
                        "title": "Team Settings",
                      },
                    ]
                  }
                />
                <ForwardRef
                  align="baseline"
                  direction="row"
                  justify="space-between"
                >
                  <ForwardRef
                    type="secondary"
                  >
                    Pricing Rules
                  </ForwardRef>
                  <div>
                    <ForwardRef
                      disabled={true}
                      onClick={[MockFunction]}
                    >
                      Buyer Types
                    </ForwardRef>
                    <ForwardRef
                      disabled={false}
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                          "marginLeft": "2rem",
                        }
                      }
                    >
                      New Rule
                    </ForwardRef>
                  </div>
                </ForwardRef>
              </ForwardRef>
              <ForwardRef
                flex={1}
              >
                <Connect(VirtualizedPricingRulesPresenter) />
              </ForwardRef>
            </ForwardRef>,
            "scrollLocked": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  margin="1rem 0"
                >
                  <Breadcrumbs
                    crumbs={
                      Array [
                        Object {
                          "path": "/dashboard",
                          "title": "Dashboard",
                        },
                        Object {
                          "path": "/pricing",
                          "title": "Team Settings",
                        },
                      ]
                    }
                  />
                  <ForwardRef
                    align="baseline"
                    direction="row"
                    justify="space-between"
                  >
                    <ForwardRef
                      type="secondary"
                    >
                      Pricing Rules
                    </ForwardRef>
                    <div>
                      <ForwardRef
                        disabled={true}
                        onClick={[MockFunction]}
                      >
                        Buyer Types
                      </ForwardRef>
                      <ForwardRef
                        disabled={false}
                        onClick={[Function]}
                        style={
                          Object {
                            "cursor": "pointer",
                            "marginLeft": "2rem",
                          }
                        }
                      >
                        New Rule
                      </ForwardRef>
                    </div>
                  </ForwardRef>
                </ForwardRef>,
                <ForwardRef
                  flex={1}
                >
                  <Connect(VirtualizedPricingRulesPresenter) />
                </ForwardRef>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <Breadcrumbs
                      crumbs={
                        Array [
                          Object {
                            "path": "/dashboard",
                            "title": "Dashboard",
                          },
                          Object {
                            "path": "/pricing",
                            "title": "Team Settings",
                          },
                        ]
                      }
                    />,
                    <ForwardRef
                      align="baseline"
                      direction="row"
                      justify="space-between"
                    >
                      <ForwardRef
                        type="secondary"
                      >
                        Pricing Rules
                      </ForwardRef>
                      <div>
                        <ForwardRef
                          disabled={true}
                          onClick={[MockFunction]}
                        >
                          Buyer Types
                        </ForwardRef>
                        <ForwardRef
                          disabled={false}
                          onClick={[Function]}
                          style={
                            Object {
                              "cursor": "pointer",
                              "marginLeft": "2rem",
                            }
                          }
                        >
                          New Rule
                        </ForwardRef>
                      </div>
                    </ForwardRef>,
                  ],
                  "margin": "1rem 0",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "crumbs": Array [
                        Object {
                          "path": "/dashboard",
                          "title": "Dashboard",
                        },
                        Object {
                          "path": "/pricing",
                          "title": "Team Settings",
                        },
                      ],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "align": "baseline",
                      "children": Array [
                        <ForwardRef
                          type="secondary"
                        >
                          Pricing Rules
                        </ForwardRef>,
                        <div>
                          <ForwardRef
                            disabled={true}
                            onClick={[MockFunction]}
                          >
                            Buyer Types
                          </ForwardRef>
                          <ForwardRef
                            disabled={false}
                            onClick={[Function]}
                            style={
                              Object {
                                "cursor": "pointer",
                                "marginLeft": "2rem",
                              }
                            }
                          >
                            New Rule
                          </ForwardRef>
                        </div>,
                      ],
                      "direction": "row",
                      "justify": "space-between",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Pricing Rules",
                          "type": "secondary",
                        },
                        "ref": null,
                        "rendered": "Pricing Rules",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "rules": Array [
                              "
  color: ",
                              [Function],
                              "
  font-size: ",
                              [Function],
                              ";
  font-weight: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.h3",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "h3",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <ForwardRef
                              disabled={true}
                              onClick={[MockFunction]}
                            >
                              Buyer Types
                            </ForwardRef>,
                            <ForwardRef
                              disabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "cursor": "pointer",
                                  "marginLeft": "2rem",
                                }
                              }
                            >
                              New Rule
                            </ForwardRef>,
                          ],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "Buyer Types",
                              "disabled": true,
                              "onClick": [MockFunction],
                            },
                            "ref": null,
                            "rendered": "Buyer Types",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gzVnrw",
                                "isStatic": false,
                                "rules": Array [
                                  "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                                  [Function],
                                  ";
  background-color: ",
                                  "#38A9DB",
                                  ";
  color: ",
                                  "#FFFFFF",
                                  ";
  transition: opacity 100ms ease-out;
  margin: ",
                                  [Function],
                                  ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                                  "#D1D1D1",
                                  ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                                  "#024A8F",
                                  ";
    cursor: pointer;
  }
",
                                  "
  background-color: ",
                                  "#FFFFFF",
                                  ";
  border: 1px solid ",
                                  "#38A9DB",
                                  ";
  color: ",
                                  "#38A9DB",
                                  ";

  &:hover:not(:disabled) {
    background-color: ",
                                  "#FFFFFF",
                                  ";
    border: 1px solid ",
                                  "#024A8F",
                                  ";
    color: ",
                                  "#024A8F",
                                  ";
  }
",
                                ],
                              },
                              "displayName": "Styled(styled.button)",
                              "foldedComponentIds": Array [
                                "sc-bZQynM",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-gzVnrw",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "New Rule",
                              "disabled": false,
                              "onClick": [Function],
                              "style": Object {
                                "cursor": "pointer",
                                "marginLeft": "2rem",
                              },
                            },
                            "ref": null,
                            "rendered": "New Rule",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bZQynM",
                                "isStatic": false,
                                "rules": Array [
                                  "
  min-width: 100px;
  padding: 0 1rem;
  border: none;
  border-radius: 3px;
  height: ",
                                  [Function],
                                  ";
  background-color: ",
                                  "#38A9DB",
                                  ";
  color: ",
                                  "#FFFFFF",
                                  ";
  transition: opacity 100ms ease-out;
  margin: ",
                                  [Function],
                                  ";

  &:disabled {
    opacity: 0.3;
    background-color: ",
                                  "#D1D1D1",
                                  ";
  }

  &:hover:not(:disabled) {
    background-color: ",
                                  "#024A8F",
                                  ";
    cursor: pointer;
  }
",
                                ],
                              },
                              "displayName": "styled.button",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bZQynM",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                        ],
                        "type": "div",
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hMqMXs",
                        "isStatic": false,
                        "rules": Array [
                          "
  display: ",
                          [Function],
                          ";
  flex: ",
                          [Function],
                          ";
  flex-direction: ",
                          [Function],
                          "
  flex-grow: ",
                          [Function],
                          ";
  flex-shrink: ",
                          [Function],
                          ";
  flex-basis: ",
                          [Function],
                          ";
  flex-wrap: ",
                          [Function],
                          ";
  order: ",
                          [Function],
                          ";
  justify-content: ",
                          [Function],
                          ";
  align-items: ",
                          [Function],
                          ";
  align-content: ",
                          [Function],
                          ";
  align-self: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  width: ",
                          [Function],
                          ";
",
                          "
    margin: ",
                          [Function],
                          ";
    margin-top: ",
                          [Function],
                          ";
    margin-bottom: ",
                          [Function],
                          ";
    margin-left: ",
                          [Function],
                          ";
    margin-right: ",
                          [Function],
                          ";

    padding: ",
                          [Function],
                          ";
    padding-top: ",
                          [Function],
                          ";
    padding-bottom: ",
                          [Function],
                          ";
    padding-left: ",
                          [Function],
                          ";
    padding-right: ",
                          [Function],
                          ";

    border: ",
                          [Function],
                          ";
    border-top: ",
                          [Function],
                          ";
    border-bottom: ",
                          [Function],
                          ";
    border-left: ",
                          [Function],
                          ";
    border-right: ",
                          [Function],
                          ";
  ",
                        ],
                      },
                      "displayName": "Flex",
                      "foldedComponentIds": Array [
                        "sc-eNQAEJ",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-hMqMXs",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ksYbfQ",
                    "isStatic": false,
                    "rules": Array [
                      "
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ksYbfQ",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Connect(VirtualizedPricingRulesPresenter) />,
                  "flex": 1,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-itybZL",
                    "isStatic": false,
                    "rules": Array [
                      "
  flex: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
",
                      "
  min-height: 100%;
",
                    ],
                  },
                  "defaultProps": Object {
                    "flex": 1,
                  },
                  "displayName": "Styled(FlexItem)",
                  "foldedComponentIds": Array [
                    "sc-kEYyzF",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-itybZL",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-dTdPqK",
                "isStatic": false,
                "rules": Array [
                  "
  display: ",
                  [Function],
                  ";
  flex: ",
                  [Function],
                  ";
  flex-direction: ",
                  [Function],
                  "
  flex-grow: ",
                  [Function],
                  ";
  flex-shrink: ",
                  [Function],
                  ";
  flex-basis: ",
                  [Function],
                  ";
  flex-wrap: ",
                  [Function],
                  ";
  order: ",
                  [Function],
                  ";
  justify-content: ",
                  [Function],
                  ";
  align-items: ",
                  [Function],
                  ";
  align-content: ",
                  [Function],
                  ";
  align-self: ",
                  [Function],
                  ";
  height: ",
                  [Function],
                  ";
  width: ",
                  [Function],
                  ";
",
                  "
    margin: ",
                  [Function],
                  ";
    margin-top: ",
                  [Function],
                  ";
    margin-bottom: ",
                  [Function],
                  ";
    margin-left: ",
                  [Function],
                  ";
    margin-right: ",
                  [Function],
                  ";

    padding: ",
                  [Function],
                  ";
    padding-top: ",
                  [Function],
                  ";
    padding-bottom: ",
                  [Function],
                  ";
    padding-left: ",
                  [Function],
                  ";
    padding-right: ",
                  [Function],
                  ";

    border: ",
                  [Function],
                  ";
    border-top: ",
                  [Function],
                  ";
    border-bottom: ",
                  [Function],
                  ";
    border-left: ",
                  [Function],
                  ";
    border-right: ",
                  [Function],
                  ";
  ",
                  "
  flex-direction: column;
  justify-content: center;
  padding: 6rem 4rem;
  width: 100%;
",
                ],
              },
              "displayName": "Styled(Flex)",
              "foldedComponentIds": Array [
                "sc-eNQAEJ",
                "sc-hMqMXs",
              ],
              "render": [Function],
              "styledComponentId": "sc-dTdPqK",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-eMigcr",
              "isStatic": false,
              "rules": Array [
                "
  display: flex;
  position: absolute;
  top: 5rem;
  bottom: 0;
  left: 0;
  right: 0;
",
                "
  overflow: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "Styled(styled.div)",
            "foldedComponentIds": Array [
              "sc-eTuwsz",
            ],
            "render": [Function],
            "styledComponentId": "sc-eMigcr",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwCtUz",
          "isStatic": true,
          "rules": Array [
            "
  height: 100%;
  width: 100%;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwCtUz",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
