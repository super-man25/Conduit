// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BuyerTypeRow /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BuyerTypeRow
    buyerType={
        Object {
            "disabled": false,
            "id": "333",
          }
    }
    editedBuyerTypes={Object {}}
    onBuyerTypeToggle={[Function]}
    toggleDisabled={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "align": "center",
      "children": Array [
        <Flex
          flexBasis="10%"
          style={
                    Object {
                              "height": "25px",
                            }
          }
          title="An active pricing rule is using this buyer type"
/>,
        <Flex
          flexBasis="20%"
>
          <Toggle
                    isChecked={true}
                    isDisabled={false}
                    onChange={[Function]}
                    size="small"
          />
</Flex>,
        <styled.p
          basis="20%"
/>,
        <styled.p
          basis="60%"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": false,
          "flexBasis": "10%",
          "style": Object {
            "height": "25px",
          },
          "title": "An active pricing rule is using this buyer type",
        },
        "ref": null,
        "rendered": false,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Toggle
            isChecked={true}
            isDisabled={false}
            onChange={[Function]}
            size="small"
/>,
          "flexBasis": "20%",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "isChecked": true,
            "isDisabled": false,
            "onChange": [Function],
            "size": "small",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "basis": "20%",
          "children": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "basis": "60%",
          "children": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "align": "center",
        "children": Array [
          <Flex
            flexBasis="10%"
            style={
                        Object {
                                    "height": "25px",
                                  }
            }
            title="An active pricing rule is using this buyer type"
/>,
          <Flex
            flexBasis="20%"
>
            <Toggle
                        isChecked={true}
                        isDisabled={false}
                        onChange={[Function]}
                        size="small"
            />
</Flex>,
          <styled.p
            basis="20%"
/>,
          <styled.p
            basis="60%"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": false,
            "flexBasis": "10%",
            "style": Object {
              "height": "25px",
            },
            "title": "An active pricing rule is using this buyer type",
          },
          "ref": null,
          "rendered": false,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Toggle
              isChecked={true}
              isDisabled={false}
              onChange={[Function]}
              size="small"
/>,
            "flexBasis": "20%",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "isChecked": true,
              "isDisabled": false,
              "onChange": [Function],
              "size": "small",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "basis": "20%",
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "basis": "60%",
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
