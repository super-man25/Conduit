// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DefaultColumnHeaderPresenter /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DefaultColumnHeaderPresenter
    label="Label"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "active": undefined,
      "children": <styled.div
        position="relative"
      >
        <Flex
          align="left"
        >
          <styled.p
            weight={600}
          >
            Label
          </styled.p>
           
        </Flex>
      </styled.div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Flex
          align="left"
        >
          <styled.p
            weight={600}
          >
            Label
          </styled.p>
           
        </Flex>,
        "position": "relative",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "align": "left",
          "children": Array [
            <styled.p
              weight={600}
            >
              Label
            </styled.p>,
            " ",
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Label",
              "weight": 600,
            },
            "ref": null,
            "rendered": "Label",
            "type": [Function],
          },
          " ",
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "active": undefined,
        "children": <styled.div
          position="relative"
        >
          <Flex
            align="left"
          >
            <styled.p
              weight={600}
            >
              Label
            </styled.p>
             
          </Flex>
        </styled.div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Flex
            align="left"
          >
            <styled.p
              weight={600}
            >
              Label
            </styled.p>
             
          </Flex>,
          "position": "relative",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "left",
            "children": Array [
              <styled.p
                weight={600}
              >
                Label
              </styled.p>,
              " ",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Label",
                "weight": 600,
              },
              "ref": null,
              "rendered": "Label",
              "type": [Function],
            },
            " ",
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
