// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<GroupedSplitButton /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GroupedSplitButton
    isGrouped={true}
    selectGrouping={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          isActive={false}
          onClick={[Function]}
        >
          Uncategorized
        </ForwardRef>,
        <ForwardRef
          isActive={true}
          onClick={[Function]}
        >
          By Category
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Uncategorized",
          "isActive": false,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Uncategorized",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-emmjRN",
            "isStatic": false,
            "rules": Array [
              "
  padding: 8px;
  border: 1px solid ",
              "#024A8F",
              ";
  display: inline-block;
  min-width: 35%;
  text-align: center;
  cursor: pointer;

  color: ",
              [Function],
              "

  background-color: ",
              [Function],
              "

  :not(:last-child) {
    border-bottom-left-radius: 2px;
    border-top-left-radius: 2px;
    border-right: none;
  }

  :last-child {
    border-bottom-right-radius: 2px;
    border-top-right-radius: 2px;
  }
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-emmjRN",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "By Category",
          "isActive": true,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "By Category",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-emmjRN",
            "isStatic": false,
            "rules": Array [
              "
  padding: 8px;
  border: 1px solid ",
              "#024A8F",
              ";
  display: inline-block;
  min-width: 35%;
  text-align: center;
  cursor: pointer;

  color: ",
              [Function],
              "

  background-color: ",
              [Function],
              "

  :not(:last-child) {
    border-bottom-left-radius: 2px;
    border-top-left-radius: 2px;
    border-right: none;
  }

  :last-child {
    border-bottom-right-radius: 2px;
    border-top-right-radius: 2px;
  }
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-emmjRN",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-eerKOB",
        "isStatic": true,
        "rules": Array [
          "
  flex-basis: 100%;
  display: flex;
  justify-content: center;
  margin-top: 15px;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-eerKOB",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            isActive={false}
            onClick={[Function]}
          >
            Uncategorized
          </ForwardRef>,
          <ForwardRef
            isActive={true}
            onClick={[Function]}
          >
            By Category
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Uncategorized",
            "isActive": false,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Uncategorized",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-emmjRN",
              "isStatic": false,
              "rules": Array [
                "
  padding: 8px;
  border: 1px solid ",
                "#024A8F",
                ";
  display: inline-block;
  min-width: 35%;
  text-align: center;
  cursor: pointer;

  color: ",
                [Function],
                "

  background-color: ",
                [Function],
                "

  :not(:last-child) {
    border-bottom-left-radius: 2px;
    border-top-left-radius: 2px;
    border-right: none;
  }

  :last-child {
    border-bottom-right-radius: 2px;
    border-top-right-radius: 2px;
  }
",
              ],
            },
            "displayName": "styled.span",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-emmjRN",
            "target": "span",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "By Category",
            "isActive": true,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "By Category",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-emmjRN",
              "isStatic": false,
              "rules": Array [
                "
  padding: 8px;
  border: 1px solid ",
                "#024A8F",
                ";
  display: inline-block;
  min-width: 35%;
  text-align: center;
  cursor: pointer;

  color: ",
                [Function],
                "

  background-color: ",
                [Function],
                "

  :not(:last-child) {
    border-bottom-left-radius: 2px;
    border-top-left-radius: 2px;
    border-right: none;
  }

  :last-child {
    border-bottom-right-radius: 2px;
    border-top-right-radius: 2px;
  }
",
              ],
            },
            "displayName": "styled.span",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-emmjRN",
            "target": "span",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-eerKOB",
          "isStatic": true,
          "rules": Array [
            "
  flex-basis: 100%;
  display: flex;
  justify-content: center;
  margin-top: 15px;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-eerKOB",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<MultiSelect /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MultiSelect
    isGroupable={false}
    label="Events"
    labelFn={[MockFunction]}
    onItemClicked={[MockFunction]}
    options={
      Array [
        Object {
          "id": 2,
          "name": "Braves at Zephyrs",
        },
        Object {
          "id": 5,
          "name": "Dogs at Cats",
        },
        Object {
          "id": 17,
          "name": "Mariners at Zephyrs",
        },
      ]
    }
    selected={
      Array [
        17,
      ]
    }
    toggleSelectAll={[MockFunction]}
    updatePriceRuleProperty={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <ForwardRef
          align="center"
          justify="space-between"
        >
          <Icon
            color="#070707"
            name="arrow-drop-down"
            size={24}
          />
        </ForwardRef>,
        <div
          style={
            Object {
              "position": "fixed",
              "zIndex": 9,
            }
          }
        >
          <ForwardRef
            show={false}
            style={
              Object {
                "maxHeight": Object {},
              }
            }
          >
            <ForwardRef
              align="center"
              flexWrap="wrap"
              justify="space-between"
              padding="1rem"
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                }
              }
            >
              <ForwardRef
                size={13}
                weight={600}
              >
                Events
              </ForwardRef>
              <ForwardRef
                color="#38A9DB"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                Select All
              </ForwardRef>
            </ForwardRef>
            <MultiSelectView
              labelFn={[MockFunction]}
              onItemClicked={[MockFunction]}
              options={
                Array [
                  Object {
                    "id": 2,
                    "name": "Braves at Zephyrs",
                  },
                  Object {
                    "id": 5,
                    "name": "Dogs at Cats",
                  },
                  Object {
                    "id": 17,
                    "name": "Mariners at Zephyrs",
                  },
                ]
              }
              selected={
                Array [
                  17,
                ]
              }
            />
          </ForwardRef>
        </div>,
      ],
      "onClick": [Function],
      "onClickAway": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "align": "center",
          "children": Array [
            undefined,
            <Icon
              color="#070707"
              name="arrow-drop-down"
              size={24}
            />,
          ],
          "justify": "space-between",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "color": "#070707",
              "name": "arrow-drop-down",
              "size": 24,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-hMqMXs",
            "isStatic": false,
            "rules": Array [
              "
  display: ",
              [Function],
              ";
  flex: ",
              [Function],
              ";
  flex-direction: ",
              [Function],
              "
  flex-grow: ",
              [Function],
              ";
  flex-shrink: ",
              [Function],
              ";
  flex-basis: ",
              [Function],
              ";
  flex-wrap: ",
              [Function],
              ";
  order: ",
              [Function],
              ";
  justify-content: ",
              [Function],
              ";
  align-items: ",
              [Function],
              ";
  align-content: ",
              [Function],
              ";
  align-self: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Flex",
          "foldedComponentIds": Array [
            "sc-eNQAEJ",
          ],
          "render": [Function],
          "styledComponentId": "sc-hMqMXs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <ForwardRef
            show={false}
            style={
              Object {
                "maxHeight": Object {},
              }
            }
          >
            <ForwardRef
              align="center"
              flexWrap="wrap"
              justify="space-between"
              padding="1rem"
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                }
              }
            >
              <ForwardRef
                size={13}
                weight={600}
              >
                Events
              </ForwardRef>
              <ForwardRef
                color="#38A9DB"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                Select All
              </ForwardRef>
            </ForwardRef>
            <MultiSelectView
              labelFn={[MockFunction]}
              onItemClicked={[MockFunction]}
              options={
                Array [
                  Object {
                    "id": 2,
                    "name": "Braves at Zephyrs",
                  },
                  Object {
                    "id": 5,
                    "name": "Dogs at Cats",
                  },
                  Object {
                    "id": 17,
                    "name": "Mariners at Zephyrs",
                  },
                ]
              }
              selected={
                Array [
                  17,
                ]
              }
            />
          </ForwardRef>,
          "style": Object {
            "position": "fixed",
            "zIndex": 9,
          },
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                align="center"
                flexWrap="wrap"
                justify="space-between"
                padding="1rem"
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                  }
                }
              >
                <ForwardRef
                  size={13}
                  weight={600}
                >
                  Events
                </ForwardRef>
                <ForwardRef
                  color="#38A9DB"
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  Select All
                </ForwardRef>
              </ForwardRef>,
              <MultiSelectView
                labelFn={[MockFunction]}
                onItemClicked={[MockFunction]}
                options={
                  Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ]
                }
                selected={
                  Array [
                    17,
                  ]
                }
              />,
            ],
            "show": false,
            "style": Object {
              "maxHeight": Object {},
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "align": "center",
                "children": Array [
                  <ForwardRef
                    size={13}
                    weight={600}
                  >
                    Events
                  </ForwardRef>,
                  <ForwardRef
                    color="#38A9DB"
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                      }
                    }
                  >
                    Select All
                  </ForwardRef>,
                  false,
                ],
                "flexWrap": "wrap",
                "justify": "space-between",
                "padding": "1rem",
                "style": Object {
                  "backgroundColor": "#FFFFFF",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Events",
                    "size": 13,
                    "weight": 600,
                  },
                  "ref": null,
                  "rendered": "Events",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Select All",
                    "color": "#38A9DB",
                    "onClick": [Function],
                    "style": Object {
                      "cursor": "pointer",
                    },
                  },
                  "ref": null,
                  "rendered": "Select All",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                false,
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-hMqMXs",
                  "isStatic": false,
                  "rules": Array [
                    "
  display: ",
                    [Function],
                    ";
  flex: ",
                    [Function],
                    ";
  flex-direction: ",
                    [Function],
                    "
  flex-grow: ",
                    [Function],
                    ";
  flex-shrink: ",
                    [Function],
                    ";
  flex-basis: ",
                    [Function],
                    ";
  flex-wrap: ",
                    [Function],
                    ";
  order: ",
                    [Function],
                    ";
  justify-content: ",
                    [Function],
                    ";
  align-items: ",
                    [Function],
                    ";
  align-content: ",
                    [Function],
                    ";
  align-self: ",
                    [Function],
                    ";
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
",
                    "
    margin: ",
                    [Function],
                    ";
    margin-top: ",
                    [Function],
                    ";
    margin-bottom: ",
                    [Function],
                    ";
    margin-left: ",
                    [Function],
                    ";
    margin-right: ",
                    [Function],
                    ";

    padding: ",
                    [Function],
                    ";
    padding-top: ",
                    [Function],
                    ";
    padding-bottom: ",
                    [Function],
                    ";
    padding-left: ",
                    [Function],
                    ";
    padding-right: ",
                    [Function],
                    ";

    border: ",
                    [Function],
                    ";
    border-top: ",
                    [Function],
                    ";
    border-bottom: ",
                    [Function],
                    ";
    border-left: ",
                    [Function],
                    ";
    border-right: ",
                    [Function],
                    ";
  ",
                  ],
                },
                "displayName": "Flex",
                "foldedComponentIds": Array [
                  "sc-eNQAEJ",
                ],
                "render": [Function],
                "styledComponentId": "sc-hMqMXs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "labelFn": [MockFunction],
                "onItemClicked": [MockFunction],
                "options": Array [
                  Object {
                    "id": 2,
                    "name": "Braves at Zephyrs",
                  },
                  Object {
                    "id": 5,
                    "name": "Dogs at Cats",
                  },
                  Object {
                    "id": 17,
                    "name": "Mariners at Zephyrs",
                  },
                ],
                "selected": Array [
                  17,
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gHboQg",
              "isStatic": false,
              "rules": Array [
                "
  position: absolute;
  width: 250px;
  top: calc(100% + 8px);
  max-height: 350px;
  overflow-y: scroll;
  overflow-x: hidden;
  z-index: 10;
  border: 1px solid ",
                "#EEEEEE",
                ";
  box-shadow: 0 20px 20px rgba(0, 0, 0, 0.06);

  transition: 0.1s ease-in-out all;
  opacity: 0;
  transform: translateY(20px);
  visibility: hidden;

  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gHboQg",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ForwardRef
            align="center"
            justify="space-between"
          >
            <Icon
              color="#070707"
              name="arrow-drop-down"
              size={24}
            />
          </ForwardRef>,
          <div
            style={
              Object {
                "position": "fixed",
                "zIndex": 9,
              }
            }
          >
            <ForwardRef
              show={false}
              style={
                Object {
                  "maxHeight": Object {},
                }
              }
            >
              <ForwardRef
                align="center"
                flexWrap="wrap"
                justify="space-between"
                padding="1rem"
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                  }
                }
              >
                <ForwardRef
                  size={13}
                  weight={600}
                >
                  Events
                </ForwardRef>
                <ForwardRef
                  color="#38A9DB"
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  Select All
                </ForwardRef>
              </ForwardRef>
              <MultiSelectView
                labelFn={[MockFunction]}
                onItemClicked={[MockFunction]}
                options={
                  Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ]
                }
                selected={
                  Array [
                    17,
                  ]
                }
              />
            </ForwardRef>
          </div>,
        ],
        "onClick": [Function],
        "onClickAway": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "align": "center",
            "children": Array [
              undefined,
              <Icon
                color="#070707"
                name="arrow-drop-down"
                size={24}
              />,
            ],
            "justify": "space-between",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "color": "#070707",
                "name": "arrow-drop-down",
                "size": 24,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hMqMXs",
              "isStatic": false,
              "rules": Array [
                "
  display: ",
                [Function],
                ";
  flex: ",
                [Function],
                ";
  flex-direction: ",
                [Function],
                "
  flex-grow: ",
                [Function],
                ";
  flex-shrink: ",
                [Function],
                ";
  flex-basis: ",
                [Function],
                ";
  flex-wrap: ",
                [Function],
                ";
  order: ",
                [Function],
                ";
  justify-content: ",
                [Function],
                ";
  align-items: ",
                [Function],
                ";
  align-content: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
              ],
            },
            "displayName": "Flex",
            "foldedComponentIds": Array [
              "sc-eNQAEJ",
            ],
            "render": [Function],
            "styledComponentId": "sc-hMqMXs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ForwardRef
              show={false}
              style={
                Object {
                  "maxHeight": Object {},
                }
              }
            >
              <ForwardRef
                align="center"
                flexWrap="wrap"
                justify="space-between"
                padding="1rem"
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                  }
                }
              >
                <ForwardRef
                  size={13}
                  weight={600}
                >
                  Events
                </ForwardRef>
                <ForwardRef
                  color="#38A9DB"
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  Select All
                </ForwardRef>
              </ForwardRef>
              <MultiSelectView
                labelFn={[MockFunction]}
                onItemClicked={[MockFunction]}
                options={
                  Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ]
                }
                selected={
                  Array [
                    17,
                  ]
                }
              />
            </ForwardRef>,
            "style": Object {
              "position": "fixed",
              "zIndex": 9,
            },
          },
          "ref": Object {
            "current": null,
          },
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  align="center"
                  flexWrap="wrap"
                  justify="space-between"
                  padding="1rem"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                    }
                  }
                >
                  <ForwardRef
                    size={13}
                    weight={600}
                  >
                    Events
                  </ForwardRef>
                  <ForwardRef
                    color="#38A9DB"
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                      }
                    }
                  >
                    Select All
                  </ForwardRef>
                </ForwardRef>,
                <MultiSelectView
                  labelFn={[MockFunction]}
                  onItemClicked={[MockFunction]}
                  options={
                    Array [
                      Object {
                        "id": 2,
                        "name": "Braves at Zephyrs",
                      },
                      Object {
                        "id": 5,
                        "name": "Dogs at Cats",
                      },
                      Object {
                        "id": 17,
                        "name": "Mariners at Zephyrs",
                      },
                    ]
                  }
                  selected={
                    Array [
                      17,
                    ]
                  }
                />,
              ],
              "show": false,
              "style": Object {
                "maxHeight": Object {},
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "align": "center",
                  "children": Array [
                    <ForwardRef
                      size={13}
                      weight={600}
                    >
                      Events
                    </ForwardRef>,
                    <ForwardRef
                      color="#38A9DB"
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                        }
                      }
                    >
                      Select All
                    </ForwardRef>,
                    false,
                  ],
                  "flexWrap": "wrap",
                  "justify": "space-between",
                  "padding": "1rem",
                  "style": Object {
                    "backgroundColor": "#FFFFFF",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Events",
                      "size": 13,
                      "weight": 600,
                    },
                    "ref": null,
                    "rendered": "Events",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jKJlTe",
                        "isStatic": false,
                        "rules": Array [
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
  color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  text-align: ",
                          [Function],
                          ";
  opacity: ",
                          [Function],
                          ";
  cursor: ",
                          [Function],
                          ";

  ",
                          [Function],
                          ";
",
                          "
    margin: ",
                          [Function],
                          ";
    margin-top: ",
                          [Function],
                          ";
    margin-bottom: ",
                          [Function],
                          ";
    margin-left: ",
                          [Function],
                          ";
    margin-right: ",
                          [Function],
                          ";

    padding: ",
                          [Function],
                          ";
    padding-top: ",
                          [Function],
                          ";
    padding-bottom: ",
                          [Function],
                          ";
    padding-left: ",
                          [Function],
                          ";
    padding-right: ",
                          [Function],
                          ";

    border: ",
                          [Function],
                          ";
    border-top: ",
                          [Function],
                          ";
    border-bottom: ",
                          [Function],
                          ";
    border-left: ",
                          [Function],
                          ";
    border-right: ",
                          [Function],
                          ";
  ",
                        ],
                      },
                      "displayName": "Styled(styled.p)",
                      "foldedComponentIds": Array [
                        "sc-ckVGcZ",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-jKJlTe",
                      "target": "p",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Select All",
                      "color": "#38A9DB",
                      "onClick": [Function],
                      "style": Object {
                        "cursor": "pointer",
                      },
                    },
                    "ref": null,
                    "rendered": "Select All",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jKJlTe",
                        "isStatic": false,
                        "rules": Array [
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
  color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  text-align: ",
                          [Function],
                          ";
  opacity: ",
                          [Function],
                          ";
  cursor: ",
                          [Function],
                          ";

  ",
                          [Function],
                          ";
",
                          "
    margin: ",
                          [Function],
                          ";
    margin-top: ",
                          [Function],
                          ";
    margin-bottom: ",
                          [Function],
                          ";
    margin-left: ",
                          [Function],
                          ";
    margin-right: ",
                          [Function],
                          ";

    padding: ",
                          [Function],
                          ";
    padding-top: ",
                          [Function],
                          ";
    padding-bottom: ",
                          [Function],
                          ";
    padding-left: ",
                          [Function],
                          ";
    padding-right: ",
                          [Function],
                          ";

    border: ",
                          [Function],
                          ";
    border-top: ",
                          [Function],
                          ";
    border-bottom: ",
                          [Function],
                          ";
    border-left: ",
                          [Function],
                          ";
    border-right: ",
                          [Function],
                          ";
  ",
                        ],
                      },
                      "displayName": "Styled(styled.p)",
                      "foldedComponentIds": Array [
                        "sc-ckVGcZ",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-jKJlTe",
                      "target": "p",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  false,
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "rules": Array [
                      "
  display: ",
                      [Function],
                      ";
  flex: ",
                      [Function],
                      ";
  flex-direction: ",
                      [Function],
                      "
  flex-grow: ",
                      [Function],
                      ";
  flex-shrink: ",
                      [Function],
                      ";
  flex-basis: ",
                      [Function],
                      ";
  flex-wrap: ",
                      [Function],
                      ";
  order: ",
                      [Function],
                      ";
  justify-content: ",
                      [Function],
                      ";
  align-items: ",
                      [Function],
                      ";
  align-content: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Flex",
                  "foldedComponentIds": Array [
                    "sc-eNQAEJ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "labelFn": [MockFunction],
                  "onItemClicked": [MockFunction],
                  "options": Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ],
                  "selected": Array [
                    17,
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gHboQg",
                "isStatic": false,
                "rules": Array [
                  "
  position: absolute;
  width: 250px;
  top: calc(100% + 8px);
  max-height: 350px;
  overflow-y: scroll;
  overflow-x: hidden;
  z-index: 10;
  border: 1px solid ",
                  "#EEEEEE",
                  ";
  box-shadow: 0 20px 20px rgba(0, 0, 0, 0.06);

  transition: 0.1s ease-in-out all;
  opacity: 0;
  transform: translateY(20px);
  visibility: hidden;

  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gHboQg",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<MultiSelect /> should update the state if the grouped view is toggled 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MultiSelect
    isGroupable={true}
    label="Events"
    labelFn={[MockFunction]}
    onItemClicked={[MockFunction]}
    options={
      Array [
        Object {
          "id": 2,
          "name": "Braves at Zephyrs",
        },
        Object {
          "id": 5,
          "name": "Dogs at Cats",
        },
        Object {
          "id": 17,
          "name": "Mariners at Zephyrs",
        },
      ]
    }
    selected={
      Array [
        17,
      ]
    }
    toggleSelectAll={[MockFunction]}
    updatePriceRuleProperty={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <ForwardRef
          align="center"
          justify="space-between"
        >
          <Icon
            color="#070707"
            name="arrow-drop-down"
            size={24}
          />
        </ForwardRef>,
        <div
          style={
            Object {
              "position": "fixed",
              "zIndex": 9,
            }
          }
        >
          <ForwardRef
            show={false}
            style={
              Object {
                "maxHeight": Object {},
              }
            }
          >
            <ForwardRef
              align="center"
              flexWrap="wrap"
              justify="space-between"
              padding="1rem"
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                }
              }
            >
              <ForwardRef
                size={13}
                weight={600}
              >
                Events
              </ForwardRef>
              <ForwardRef
                color="#38A9DB"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                Select All
              </ForwardRef>
              <GroupedSplitButton
                isGrouped={false}
                selectGrouping={[Function]}
              />
            </ForwardRef>
            <MultiSelectView
              labelFn={[MockFunction]}
              onItemClicked={[MockFunction]}
              options={
                Array [
                  Object {
                    "id": 2,
                    "name": "Braves at Zephyrs",
                  },
                  Object {
                    "id": 5,
                    "name": "Dogs at Cats",
                  },
                  Object {
                    "id": 17,
                    "name": "Mariners at Zephyrs",
                  },
                ]
              }
              selected={
                Array [
                  17,
                ]
              }
            />
          </ForwardRef>
        </div>,
      ],
      "onClick": [Function],
      "onClickAway": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "align": "center",
          "children": Array [
            undefined,
            <Icon
              color="#070707"
              name="arrow-drop-down"
              size={24}
            />,
          ],
          "justify": "space-between",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "color": "#070707",
              "name": "arrow-drop-down",
              "size": 24,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-hMqMXs",
            "isStatic": false,
            "rules": Array [
              "
  display: ",
              [Function],
              ";
  flex: ",
              [Function],
              ";
  flex-direction: ",
              [Function],
              "
  flex-grow: ",
              [Function],
              ";
  flex-shrink: ",
              [Function],
              ";
  flex-basis: ",
              [Function],
              ";
  flex-wrap: ",
              [Function],
              ";
  order: ",
              [Function],
              ";
  justify-content: ",
              [Function],
              ";
  align-items: ",
              [Function],
              ";
  align-content: ",
              [Function],
              ";
  align-self: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
",
              "
    margin: ",
              [Function],
              ";
    margin-top: ",
              [Function],
              ";
    margin-bottom: ",
              [Function],
              ";
    margin-left: ",
              [Function],
              ";
    margin-right: ",
              [Function],
              ";

    padding: ",
              [Function],
              ";
    padding-top: ",
              [Function],
              ";
    padding-bottom: ",
              [Function],
              ";
    padding-left: ",
              [Function],
              ";
    padding-right: ",
              [Function],
              ";

    border: ",
              [Function],
              ";
    border-top: ",
              [Function],
              ";
    border-bottom: ",
              [Function],
              ";
    border-left: ",
              [Function],
              ";
    border-right: ",
              [Function],
              ";
  ",
            ],
          },
          "displayName": "Flex",
          "foldedComponentIds": Array [
            "sc-eNQAEJ",
          ],
          "render": [Function],
          "styledComponentId": "sc-hMqMXs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <ForwardRef
            show={false}
            style={
              Object {
                "maxHeight": Object {},
              }
            }
          >
            <ForwardRef
              align="center"
              flexWrap="wrap"
              justify="space-between"
              padding="1rem"
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                }
              }
            >
              <ForwardRef
                size={13}
                weight={600}
              >
                Events
              </ForwardRef>
              <ForwardRef
                color="#38A9DB"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                Select All
              </ForwardRef>
              <GroupedSplitButton
                isGrouped={false}
                selectGrouping={[Function]}
              />
            </ForwardRef>
            <MultiSelectView
              labelFn={[MockFunction]}
              onItemClicked={[MockFunction]}
              options={
                Array [
                  Object {
                    "id": 2,
                    "name": "Braves at Zephyrs",
                  },
                  Object {
                    "id": 5,
                    "name": "Dogs at Cats",
                  },
                  Object {
                    "id": 17,
                    "name": "Mariners at Zephyrs",
                  },
                ]
              }
              selected={
                Array [
                  17,
                ]
              }
            />
          </ForwardRef>,
          "style": Object {
            "position": "fixed",
            "zIndex": 9,
          },
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                align="center"
                flexWrap="wrap"
                justify="space-between"
                padding="1rem"
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                  }
                }
              >
                <ForwardRef
                  size={13}
                  weight={600}
                >
                  Events
                </ForwardRef>
                <ForwardRef
                  color="#38A9DB"
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  Select All
                </ForwardRef>
                <GroupedSplitButton
                  isGrouped={false}
                  selectGrouping={[Function]}
                />
              </ForwardRef>,
              <MultiSelectView
                labelFn={[MockFunction]}
                onItemClicked={[MockFunction]}
                options={
                  Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ]
                }
                selected={
                  Array [
                    17,
                  ]
                }
              />,
            ],
            "show": false,
            "style": Object {
              "maxHeight": Object {},
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "align": "center",
                "children": Array [
                  <ForwardRef
                    size={13}
                    weight={600}
                  >
                    Events
                  </ForwardRef>,
                  <ForwardRef
                    color="#38A9DB"
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                      }
                    }
                  >
                    Select All
                  </ForwardRef>,
                  <GroupedSplitButton
                    isGrouped={false}
                    selectGrouping={[Function]}
                  />,
                ],
                "flexWrap": "wrap",
                "justify": "space-between",
                "padding": "1rem",
                "style": Object {
                  "backgroundColor": "#FFFFFF",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Events",
                    "size": 13,
                    "weight": 600,
                  },
                  "ref": null,
                  "rendered": "Events",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Select All",
                    "color": "#38A9DB",
                    "onClick": [Function],
                    "style": Object {
                      "cursor": "pointer",
                    },
                  },
                  "ref": null,
                  "rendered": "Select All",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jKJlTe",
                      "isStatic": false,
                      "rules": Array [
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
  color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  text-align: ",
                        [Function],
                        ";
  opacity: ",
                        [Function],
                        ";
  cursor: ",
                        [Function],
                        ";

  ",
                        [Function],
                        ";
",
                        "
    margin: ",
                        [Function],
                        ";
    margin-top: ",
                        [Function],
                        ";
    margin-bottom: ",
                        [Function],
                        ";
    margin-left: ",
                        [Function],
                        ";
    margin-right: ",
                        [Function],
                        ";

    padding: ",
                        [Function],
                        ";
    padding-top: ",
                        [Function],
                        ";
    padding-bottom: ",
                        [Function],
                        ";
    padding-left: ",
                        [Function],
                        ";
    padding-right: ",
                        [Function],
                        ";

    border: ",
                        [Function],
                        ";
    border-top: ",
                        [Function],
                        ";
    border-bottom: ",
                        [Function],
                        ";
    border-left: ",
                        [Function],
                        ";
    border-right: ",
                        [Function],
                        ";
  ",
                      ],
                    },
                    "displayName": "Styled(styled.p)",
                    "foldedComponentIds": Array [
                      "sc-ckVGcZ",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jKJlTe",
                    "target": "p",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "isGrouped": false,
                    "selectGrouping": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-hMqMXs",
                  "isStatic": false,
                  "rules": Array [
                    "
  display: ",
                    [Function],
                    ";
  flex: ",
                    [Function],
                    ";
  flex-direction: ",
                    [Function],
                    "
  flex-grow: ",
                    [Function],
                    ";
  flex-shrink: ",
                    [Function],
                    ";
  flex-basis: ",
                    [Function],
                    ";
  flex-wrap: ",
                    [Function],
                    ";
  order: ",
                    [Function],
                    ";
  justify-content: ",
                    [Function],
                    ";
  align-items: ",
                    [Function],
                    ";
  align-content: ",
                    [Function],
                    ";
  align-self: ",
                    [Function],
                    ";
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
",
                    "
    margin: ",
                    [Function],
                    ";
    margin-top: ",
                    [Function],
                    ";
    margin-bottom: ",
                    [Function],
                    ";
    margin-left: ",
                    [Function],
                    ";
    margin-right: ",
                    [Function],
                    ";

    padding: ",
                    [Function],
                    ";
    padding-top: ",
                    [Function],
                    ";
    padding-bottom: ",
                    [Function],
                    ";
    padding-left: ",
                    [Function],
                    ";
    padding-right: ",
                    [Function],
                    ";

    border: ",
                    [Function],
                    ";
    border-top: ",
                    [Function],
                    ";
    border-bottom: ",
                    [Function],
                    ";
    border-left: ",
                    [Function],
                    ";
    border-right: ",
                    [Function],
                    ";
  ",
                  ],
                },
                "displayName": "Flex",
                "foldedComponentIds": Array [
                  "sc-eNQAEJ",
                ],
                "render": [Function],
                "styledComponentId": "sc-hMqMXs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "labelFn": [MockFunction],
                "onItemClicked": [MockFunction],
                "options": Array [
                  Object {
                    "id": 2,
                    "name": "Braves at Zephyrs",
                  },
                  Object {
                    "id": 5,
                    "name": "Dogs at Cats",
                  },
                  Object {
                    "id": 17,
                    "name": "Mariners at Zephyrs",
                  },
                ],
                "selected": Array [
                  17,
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gHboQg",
              "isStatic": false,
              "rules": Array [
                "
  position: absolute;
  width: 250px;
  top: calc(100% + 8px);
  max-height: 350px;
  overflow-y: scroll;
  overflow-x: hidden;
  z-index: 10;
  border: 1px solid ",
                "#EEEEEE",
                ";
  box-shadow: 0 20px 20px rgba(0, 0, 0, 0.06);

  transition: 0.1s ease-in-out all;
  opacity: 0;
  transform: translateY(20px);
  visibility: hidden;

  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gHboQg",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ForwardRef
            align="center"
            justify="space-between"
          >
            <Icon
              color="#070707"
              name="arrow-drop-down"
              size={24}
            />
          </ForwardRef>,
          <div
            style={
              Object {
                "position": "fixed",
                "zIndex": 9,
              }
            }
          >
            <ForwardRef
              show={false}
              style={
                Object {
                  "maxHeight": Object {},
                }
              }
            >
              <ForwardRef
                align="center"
                flexWrap="wrap"
                justify="space-between"
                padding="1rem"
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                  }
                }
              >
                <ForwardRef
                  size={13}
                  weight={600}
                >
                  Events
                </ForwardRef>
                <ForwardRef
                  color="#38A9DB"
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  Select All
                </ForwardRef>
                <GroupedSplitButton
                  isGrouped={false}
                  selectGrouping={[Function]}
                />
              </ForwardRef>
              <MultiSelectView
                labelFn={[MockFunction]}
                onItemClicked={[MockFunction]}
                options={
                  Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ]
                }
                selected={
                  Array [
                    17,
                  ]
                }
              />
            </ForwardRef>
          </div>,
        ],
        "onClick": [Function],
        "onClickAway": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "align": "center",
            "children": Array [
              undefined,
              <Icon
                color="#070707"
                name="arrow-drop-down"
                size={24}
              />,
            ],
            "justify": "space-between",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "color": "#070707",
                "name": "arrow-drop-down",
                "size": 24,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hMqMXs",
              "isStatic": false,
              "rules": Array [
                "
  display: ",
                [Function],
                ";
  flex: ",
                [Function],
                ";
  flex-direction: ",
                [Function],
                "
  flex-grow: ",
                [Function],
                ";
  flex-shrink: ",
                [Function],
                ";
  flex-basis: ",
                [Function],
                ";
  flex-wrap: ",
                [Function],
                ";
  order: ",
                [Function],
                ";
  justify-content: ",
                [Function],
                ";
  align-items: ",
                [Function],
                ";
  align-content: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
",
                "
    margin: ",
                [Function],
                ";
    margin-top: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    margin-left: ",
                [Function],
                ";
    margin-right: ",
                [Function],
                ";

    padding: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    padding-left: ",
                [Function],
                ";
    padding-right: ",
                [Function],
                ";

    border: ",
                [Function],
                ";
    border-top: ",
                [Function],
                ";
    border-bottom: ",
                [Function],
                ";
    border-left: ",
                [Function],
                ";
    border-right: ",
                [Function],
                ";
  ",
              ],
            },
            "displayName": "Flex",
            "foldedComponentIds": Array [
              "sc-eNQAEJ",
            ],
            "render": [Function],
            "styledComponentId": "sc-hMqMXs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ForwardRef
              show={false}
              style={
                Object {
                  "maxHeight": Object {},
                }
              }
            >
              <ForwardRef
                align="center"
                flexWrap="wrap"
                justify="space-between"
                padding="1rem"
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                  }
                }
              >
                <ForwardRef
                  size={13}
                  weight={600}
                >
                  Events
                </ForwardRef>
                <ForwardRef
                  color="#38A9DB"
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  Select All
                </ForwardRef>
                <GroupedSplitButton
                  isGrouped={false}
                  selectGrouping={[Function]}
                />
              </ForwardRef>
              <MultiSelectView
                labelFn={[MockFunction]}
                onItemClicked={[MockFunction]}
                options={
                  Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ]
                }
                selected={
                  Array [
                    17,
                  ]
                }
              />
            </ForwardRef>,
            "style": Object {
              "position": "fixed",
              "zIndex": 9,
            },
          },
          "ref": Object {
            "current": null,
          },
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  align="center"
                  flexWrap="wrap"
                  justify="space-between"
                  padding="1rem"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                    }
                  }
                >
                  <ForwardRef
                    size={13}
                    weight={600}
                  >
                    Events
                  </ForwardRef>
                  <ForwardRef
                    color="#38A9DB"
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                      }
                    }
                  >
                    Select All
                  </ForwardRef>
                  <GroupedSplitButton
                    isGrouped={false}
                    selectGrouping={[Function]}
                  />
                </ForwardRef>,
                <MultiSelectView
                  labelFn={[MockFunction]}
                  onItemClicked={[MockFunction]}
                  options={
                    Array [
                      Object {
                        "id": 2,
                        "name": "Braves at Zephyrs",
                      },
                      Object {
                        "id": 5,
                        "name": "Dogs at Cats",
                      },
                      Object {
                        "id": 17,
                        "name": "Mariners at Zephyrs",
                      },
                    ]
                  }
                  selected={
                    Array [
                      17,
                    ]
                  }
                />,
              ],
              "show": false,
              "style": Object {
                "maxHeight": Object {},
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "align": "center",
                  "children": Array [
                    <ForwardRef
                      size={13}
                      weight={600}
                    >
                      Events
                    </ForwardRef>,
                    <ForwardRef
                      color="#38A9DB"
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                        }
                      }
                    >
                      Select All
                    </ForwardRef>,
                    <GroupedSplitButton
                      isGrouped={false}
                      selectGrouping={[Function]}
                    />,
                  ],
                  "flexWrap": "wrap",
                  "justify": "space-between",
                  "padding": "1rem",
                  "style": Object {
                    "backgroundColor": "#FFFFFF",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Events",
                      "size": 13,
                      "weight": 600,
                    },
                    "ref": null,
                    "rendered": "Events",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jKJlTe",
                        "isStatic": false,
                        "rules": Array [
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
  color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  text-align: ",
                          [Function],
                          ";
  opacity: ",
                          [Function],
                          ";
  cursor: ",
                          [Function],
                          ";

  ",
                          [Function],
                          ";
",
                          "
    margin: ",
                          [Function],
                          ";
    margin-top: ",
                          [Function],
                          ";
    margin-bottom: ",
                          [Function],
                          ";
    margin-left: ",
                          [Function],
                          ";
    margin-right: ",
                          [Function],
                          ";

    padding: ",
                          [Function],
                          ";
    padding-top: ",
                          [Function],
                          ";
    padding-bottom: ",
                          [Function],
                          ";
    padding-left: ",
                          [Function],
                          ";
    padding-right: ",
                          [Function],
                          ";

    border: ",
                          [Function],
                          ";
    border-top: ",
                          [Function],
                          ";
    border-bottom: ",
                          [Function],
                          ";
    border-left: ",
                          [Function],
                          ";
    border-right: ",
                          [Function],
                          ";
  ",
                        ],
                      },
                      "displayName": "Styled(styled.p)",
                      "foldedComponentIds": Array [
                        "sc-ckVGcZ",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-jKJlTe",
                      "target": "p",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Select All",
                      "color": "#38A9DB",
                      "onClick": [Function],
                      "style": Object {
                        "cursor": "pointer",
                      },
                    },
                    "ref": null,
                    "rendered": "Select All",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jKJlTe",
                        "isStatic": false,
                        "rules": Array [
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
  color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  text-align: ",
                          [Function],
                          ";
  opacity: ",
                          [Function],
                          ";
  cursor: ",
                          [Function],
                          ";

  ",
                          [Function],
                          ";
",
                          "
    margin: ",
                          [Function],
                          ";
    margin-top: ",
                          [Function],
                          ";
    margin-bottom: ",
                          [Function],
                          ";
    margin-left: ",
                          [Function],
                          ";
    margin-right: ",
                          [Function],
                          ";

    padding: ",
                          [Function],
                          ";
    padding-top: ",
                          [Function],
                          ";
    padding-bottom: ",
                          [Function],
                          ";
    padding-left: ",
                          [Function],
                          ";
    padding-right: ",
                          [Function],
                          ";

    border: ",
                          [Function],
                          ";
    border-top: ",
                          [Function],
                          ";
    border-bottom: ",
                          [Function],
                          ";
    border-left: ",
                          [Function],
                          ";
    border-right: ",
                          [Function],
                          ";
  ",
                        ],
                      },
                      "displayName": "Styled(styled.p)",
                      "foldedComponentIds": Array [
                        "sc-ckVGcZ",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-jKJlTe",
                      "target": "p",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "isGrouped": false,
                      "selectGrouping": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "rules": Array [
                      "
  display: ",
                      [Function],
                      ";
  flex: ",
                      [Function],
                      ";
  flex-direction: ",
                      [Function],
                      "
  flex-grow: ",
                      [Function],
                      ";
  flex-shrink: ",
                      [Function],
                      ";
  flex-basis: ",
                      [Function],
                      ";
  flex-wrap: ",
                      [Function],
                      ";
  order: ",
                      [Function],
                      ";
  justify-content: ",
                      [Function],
                      ";
  align-items: ",
                      [Function],
                      ";
  align-content: ",
                      [Function],
                      ";
  align-self: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  width: ",
                      [Function],
                      ";
",
                      "
    margin: ",
                      [Function],
                      ";
    margin-top: ",
                      [Function],
                      ";
    margin-bottom: ",
                      [Function],
                      ";
    margin-left: ",
                      [Function],
                      ";
    margin-right: ",
                      [Function],
                      ";

    padding: ",
                      [Function],
                      ";
    padding-top: ",
                      [Function],
                      ";
    padding-bottom: ",
                      [Function],
                      ";
    padding-left: ",
                      [Function],
                      ";
    padding-right: ",
                      [Function],
                      ";

    border: ",
                      [Function],
                      ";
    border-top: ",
                      [Function],
                      ";
    border-bottom: ",
                      [Function],
                      ";
    border-left: ",
                      [Function],
                      ";
    border-right: ",
                      [Function],
                      ";
  ",
                    ],
                  },
                  "displayName": "Flex",
                  "foldedComponentIds": Array [
                    "sc-eNQAEJ",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "labelFn": [MockFunction],
                  "onItemClicked": [MockFunction],
                  "options": Array [
                    Object {
                      "id": 2,
                      "name": "Braves at Zephyrs",
                    },
                    Object {
                      "id": 5,
                      "name": "Dogs at Cats",
                    },
                    Object {
                      "id": 17,
                      "name": "Mariners at Zephyrs",
                    },
                  ],
                  "selected": Array [
                    17,
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gHboQg",
                "isStatic": false,
                "rules": Array [
                  "
  position: absolute;
  width: 250px;
  top: calc(100% + 8px);
  max-height: 350px;
  overflow-y: scroll;
  overflow-x: hidden;
  z-index: 10;
  border: 1px solid ",
                  "#EEEEEE",
                  ";
  box-shadow: 0 20px 20px rgba(0, 0, 0, 0.06);

  transition: 0.1s ease-in-out all;
  opacity: 0;
  transform: translateY(20px);
  visibility: hidden;

  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gHboQg",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
