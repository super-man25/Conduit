// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LoginPresenter /> renders correctly as forgot password form when forgot=true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginPresenter
    authActions={
      Object {
        "forgotPass": [MockFunction],
        "signIn": [MockFunction],
      }
    }
    authState={
      Object {
        "model": null,
        "pending": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <ForwardRef>
        <ForwardRef
          flex={1}
        >
          <ForwardRef
            padding="20% 40px 40px"
          >
            <ForwardRef
              maxWidth="400px"
            >
              <ForwardRef
                alt="Event Dynamic Logo"
                src="eventdynamiclogo.svg"
              />
              <ForwardRef
                style={
                  Object {
                    "marginBottom": "5px",
                  }
                }
              >
                Log In
              </ForwardRef>
              <form
                name="form"
                onSubmit={[Function]}
              >
                <ForwardRef
                  show={false}
                  style={
                    Object {
                      "fontWeight": "bold",
                      "marginBottom": "0px",
                      "marginTop": "0px",
                    }
                  }
                  type="alert-danger"
                >
                  Incorrect Email Address or Password.
                </ForwardRef>
                <ForwardRef
                  htmlFor="email"
                >
                  Email Address
                </ForwardRef>
                <ForwardRef
                  autoComplete="new-email"
                  data-test-id="email-input"
                  id="email"
                  inValid={false}
                  name="email"
                  onBlur={[Function]}
                  onChange={[Function]}
                  type="text"
                  valid={false}
                  value=""
                />
                <ForwardRef
                  type="alert-danger"
                >
                  A valid Email is required
                </ForwardRef>
                <ForwardRef
                  show={true}
                >
                  <ForwardRef
                    htmlFor="password"
                  >
                    Password
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-password"
                    data-test-id="password-input"
                    id="password"
                    inValid={false}
                    name="password"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="password"
                    valid=""
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    Password is required
                  </ForwardRef>
                </ForwardRef>
                <ForwardRef
                  data-test-id="login-button"
                  disabled={true}
                  id="login"
                >
                  Submit
                </ForwardRef>
                <ForwardRef
                  onClick={[Function]}
                >
                  Forgot Password?
                </ForwardRef>
              </form>
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>
        <ForwardRef>
          If you do not already have an account please contact
           
          <ForwardRef
            href="mailto:info@eventdynamic.com"
          >
            info@eventdynamic.com
          </ForwardRef>
           
          to begin setting up an account for your organization.
        </ForwardRef>
      </ForwardRef>,
      "imageSrc": "url(stadiumseats.jpg)",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            flex={1}
          >
            <ForwardRef
              padding="20% 40px 40px"
            >
              <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef>
            If you do not already have an account please contact
             
            <ForwardRef
              href="mailto:info@eventdynamic.com"
            >
              info@eventdynamic.com
            </ForwardRef>
             
            to begin setting up an account for your organization.
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef
              padding="20% 40px 40px"
            >
              <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>
            </ForwardRef>,
            "flex": 1,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>,
              "padding": "20% 40px 40px",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />,
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>,
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>,
                ],
                "maxWidth": "400px",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alt": "Event Dynamic Logo",
                    "src": "eventdynamiclogo.svg",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fYiAbW",
                      "isStatic": true,
                      "rules": Array [
                        "
  display: block;
  margin: auto;
  padding: 40px;
  paddingtop: 10px;
  width: 40%;
",
                      ],
                    },
                    "displayName": "styled.img",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-fYiAbW",
                    "target": "img",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Log In",
                    "style": Object {
                      "marginBottom": "5px",
                    },
                  },
                  "ref": null,
                  "rendered": "Log In",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [
                      [Function],
                    ],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": false,
                      "rules": Array [
                        "
  color: ",
                        [Function],
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.h3",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "h3",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <ForwardRef
                        show={false}
                        style={
                          Object {
                            "fontWeight": "bold",
                            "marginBottom": "0px",
                            "marginTop": "0px",
                          }
                        }
                        type="alert-danger"
                      >
                        Incorrect Email Address or Password.
                      </ForwardRef>,
                      <ForwardRef
                        htmlFor="email"
                      >
                        Email Address
                      </ForwardRef>,
                      <ForwardRef
                        autoComplete="new-email"
                        data-test-id="email-input"
                        id="email"
                        inValid={false}
                        name="email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="text"
                        valid={false}
                        value=""
                      />,
                      <ForwardRef
                        type="alert-danger"
                      >
                        A valid Email is required
                      </ForwardRef>,
                      <ForwardRef
                        show={true}
                      >
                        <ForwardRef
                          htmlFor="password"
                        >
                          Password
                        </ForwardRef>
                        <ForwardRef
                          autoComplete="new-password"
                          data-test-id="password-input"
                          id="password"
                          inValid={false}
                          name="password"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="password"
                          valid=""
                          value=""
                        />
                        <ForwardRef
                          type="alert-danger"
                        >
                          Password is required
                        </ForwardRef>
                      </ForwardRef>,
                      <ForwardRef
                        data-test-id="login-button"
                        disabled={true}
                        id="login"
                      >
                        Submit
                      </ForwardRef>,
                      <ForwardRef
                        onClick={[Function]}
                      >
                        Forgot Password?
                      </ForwardRef>,
                    ],
                    "name": "form",
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Incorrect Email Address or Password.",
                        "show": false,
                        "style": Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        },
                        "type": "alert-danger",
                      },
                      "ref": null,
                      "rendered": "Incorrect Email Address or Password.",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cvbbAY",
                          "isStatic": false,
                          "rules": Array [
                            "
  color: ",
                            [Function],
                            "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-cvbbAY",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Email Address",
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "rendered": "Email Address",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kgoBCf",
                          "isStatic": false,
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  color: ",
                            [Function],
                            ";
  font-size: ",
                            [Function],
                            ";
  font-weight: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kgoBCf",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "autoComplete": "new-email",
                        "data-test-id": "email-input",
                        "id": "email",
                        "inValid": false,
                        "name": "email",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "type": "text",
                        "valid": false,
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jWBwVP",
                          "isStatic": false,
                          "rules": Array [
                            "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                            [Function],
                            ";
  background-image: ",
                            [Function],
                            ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                            [Function],
                            ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                            [Function],
                            ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                            [Function],
                            ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                            "#999999",
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jWBwVP",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "A valid Email is required",
                        "show": undefined,
                        "type": "alert-danger",
                      },
                      "ref": null,
                      "rendered": "A valid Email is required",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cvbbAY",
                          "isStatic": false,
                          "rules": Array [
                            "
  color: ",
                            [Function],
                            "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-cvbbAY",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": Array [
                          <ForwardRef
                            htmlFor="password"
                          >
                            Password
                          </ForwardRef>,
                          <ForwardRef
                            autoComplete="new-password"
                            data-test-id="password-input"
                            id="password"
                            inValid={false}
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="password"
                            valid=""
                            value=""
                          />,
                          <ForwardRef
                            type="alert-danger"
                          >
                            Password is required
                          </ForwardRef>,
                        ],
                        "show": true,
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "children": "Password",
                            "htmlFor": "password",
                          },
                          "ref": null,
                          "rendered": "Password",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-kgoBCf",
                              "isStatic": false,
                              "rules": Array [
                                "
  display: ",
                                [Function],
                                ";
  color: ",
                                [Function],
                                ";
  font-size: ",
                                [Function],
                                ";
  font-weight: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "styled.label",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-kgoBCf",
                            "target": "label",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "autoComplete": "new-password",
                            "data-test-id": "password-input",
                            "id": "password",
                            "inValid": false,
                            "name": "password",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "type": "password",
                            "valid": "",
                            "value": "",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              [Function],
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-jWBwVP",
                              "isStatic": false,
                              "rules": Array [
                                "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                                [Function],
                                ";
  background-image: ",
                                [Function],
                                ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                                [Function],
                                ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                                [Function],
                                ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                                [Function],
                                ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                                "#999999",
                                ";
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-jWBwVP",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "children": "Password is required",
                            "show": undefined,
                            "type": "alert-danger",
                          },
                          "ref": null,
                          "rendered": "Password is required",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              [Function],
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "rules": Array [
                                "
  color: ",
                                [Function],
                                "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                      ],
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-lkqHmb",
                          "isStatic": false,
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  margin: 0;
  padding: 0;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-lkqHmb",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Submit",
                        "data-test-id": "login-button",
                        "disabled": true,
                        "id": "login",
                      },
                      "ref": null,
                      "rendered": "Submit",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  color: ",
                            [Function],
                            ";
  font-size: ",
                            [Function],
                            ";
  font-weight: 200;
  width: ",
                            [Function],
                            ";
  margin: 0;
  margin-top: ",
                            [Function],
                            ";
  margin-bottom: ",
                            [Function],
                            ";
  margin-right: ",
                            [Function],
                            ";
  padding: ",
                            [Function],
                            ";
  padding-top: ",
                            [Function],
                            ";
  padding-bottom: ",
                            [Function],
                            ";
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                            [Function],
                            ";
  background-color: ",
                            [Function],
                            ";
  &:hover {
    cursor: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    background-color: ",
                            [Function],
                            ";
    border-color: ",
                            [Function],
                            ";
  }

  &::before {
    content: '",
                            [Function],
                            "';
  }
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Forgot Password?",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": "Forgot Password?",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eLExRp",
                          "isStatic": false,
                          "rules": Array [
                            "
  cursor: pointer;
  color: ",
                            [Function],
                            ";
  font-size: ",
                            [Function],
                            ";
  font-weight: ",
                            [Function],
                            ";
  &:hover {
    color: ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eLExRp",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": "form",
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-eXEjpC",
                  "isStatic": false,
                  "rules": Array [
                    "
  max-width: ",
                    [Function],
                    ";
  margin: auto;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-eXEjpC",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ksYbfQ",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ksYbfQ",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kEYyzF",
              "isStatic": false,
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  margin: ",
                [Function],
                ";
  padding: ",
                [Function],
                ";
",
              ],
            },
            "defaultProps": Object {
              "flex": 1,
            },
            "displayName": "FlexItem",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kEYyzF",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "If you do not already have an account please contact",
              " ",
              <ForwardRef
                href="mailto:info@eventdynamic.com"
              >
                info@eventdynamic.com
              </ForwardRef>,
              " ",
              "to begin setting up an account for your organization.",
            ],
          },
          "ref": null,
          "rendered": Array [
            "If you do not already have an account please contact",
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "info@eventdynamic.com",
                "href": "mailto:info@eventdynamic.com",
              },
              "ref": null,
              "rendered": "info@eventdynamic.com",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jlyJG",
                  "isStatic": true,
                  "rules": Array [
                    "
  font-size: 10px;
  font-weight: bold;
  font-family: 'Roboto';
  line-height: 130%;
  color: ",
                    "#070707",
                    ";
  cursor: pointer;
  text-decoration: none;
",
                  ],
                },
                "displayName": "styled.a",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jlyJG",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            " ",
            "to begin setting up an account for your organization.",
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": true,
              "rules": Array [
                "
  padding: 40px;
  background-color: ",
                "#F2F2F2",
                ";
  font-size: 10px;
  line-height: 130%;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-cbkKFq",
          "isStatic": true,
          "rules": Array [
            "
  height: 100%;
  display: flex;
  flex-direction: column;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-cbkKFq",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef>
          <ForwardRef
            flex={1}
          >
            <ForwardRef
              padding="20% 40px 40px"
            >
              <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>
          <ForwardRef>
            If you do not already have an account please contact
             
            <ForwardRef
              href="mailto:info@eventdynamic.com"
            >
              info@eventdynamic.com
            </ForwardRef>
             
            to begin setting up an account for your organization.
          </ForwardRef>
        </ForwardRef>,
        "imageSrc": "url(stadiumseats.jpg)",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              flex={1}
            >
              <ForwardRef
                padding="20% 40px 40px"
              >
                <ForwardRef
                  maxWidth="400px"
                >
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef>
              If you do not already have an account please contact
               
              <ForwardRef
                href="mailto:info@eventdynamic.com"
              >
                info@eventdynamic.com
              </ForwardRef>
               
              to begin setting up an account for your organization.
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef
                padding="20% 40px 40px"
              >
                <ForwardRef
                  maxWidth="400px"
                >
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>
                </ForwardRef>
              </ForwardRef>,
              "flex": 1,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef
                  maxWidth="400px"
                >
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>
                </ForwardRef>,
                "padding": "20% 40px 40px",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      alt="Event Dynamic Logo"
                      src="eventdynamiclogo.svg"
                    />,
                    <ForwardRef
                      style={
                        Object {
                          "marginBottom": "5px",
                        }
                      }
                    >
                      Log In
                    </ForwardRef>,
                    <form
                      name="form"
                      onSubmit={[Function]}
                    >
                      <ForwardRef
                        show={false}
                        style={
                          Object {
                            "fontWeight": "bold",
                            "marginBottom": "0px",
                            "marginTop": "0px",
                          }
                        }
                        type="alert-danger"
                      >
                        Incorrect Email Address or Password.
                      </ForwardRef>
                      <ForwardRef
                        htmlFor="email"
                      >
                        Email Address
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-email"
                        data-test-id="email-input"
                        id="email"
                        inValid={false}
                        name="email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="text"
                        valid={false}
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        A valid Email is required
                      </ForwardRef>
                      <ForwardRef
                        show={true}
                      >
                        <ForwardRef
                          htmlFor="password"
                        >
                          Password
                        </ForwardRef>
                        <ForwardRef
                          autoComplete="new-password"
                          data-test-id="password-input"
                          id="password"
                          inValid={false}
                          name="password"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="password"
                          valid=""
                          value=""
                        />
                        <ForwardRef
                          type="alert-danger"
                        >
                          Password is required
                        </ForwardRef>
                      </ForwardRef>
                      <ForwardRef
                        data-test-id="login-button"
                        disabled={true}
                        id="login"
                      >
                        Submit
                      </ForwardRef>
                      <ForwardRef
                        onClick={[Function]}
                      >
                        Forgot Password?
                      </ForwardRef>
                    </form>,
                  ],
                  "maxWidth": "400px",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "alt": "Event Dynamic Logo",
                      "src": "eventdynamiclogo.svg",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-fYiAbW",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin: auto;
  padding: 40px;
  paddingtop: 10px;
  width: 40%;
",
                        ],
                      },
                      "displayName": "styled.img",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-fYiAbW",
                      "target": "img",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Log In",
                      "style": Object {
                        "marginBottom": "5px",
                      },
                    },
                    "ref": null,
                    "rendered": "Log In",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [
                        [Function],
                      ],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jTzLTM",
                        "isStatic": false,
                        "rules": Array [
                          "
  color: ",
                          [Function],
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.h3",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-jTzLTM",
                      "target": "h3",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <ForwardRef
                          show={false}
                          style={
                            Object {
                              "fontWeight": "bold",
                              "marginBottom": "0px",
                              "marginTop": "0px",
                            }
                          }
                          type="alert-danger"
                        >
                          Incorrect Email Address or Password.
                        </ForwardRef>,
                        <ForwardRef
                          htmlFor="email"
                        >
                          Email Address
                        </ForwardRef>,
                        <ForwardRef
                          autoComplete="new-email"
                          data-test-id="email-input"
                          id="email"
                          inValid={false}
                          name="email"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="text"
                          valid={false}
                          value=""
                        />,
                        <ForwardRef
                          type="alert-danger"
                        >
                          A valid Email is required
                        </ForwardRef>,
                        <ForwardRef
                          show={true}
                        >
                          <ForwardRef
                            htmlFor="password"
                          >
                            Password
                          </ForwardRef>
                          <ForwardRef
                            autoComplete="new-password"
                            data-test-id="password-input"
                            id="password"
                            inValid={false}
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="password"
                            valid=""
                            value=""
                          />
                          <ForwardRef
                            type="alert-danger"
                          >
                            Password is required
                          </ForwardRef>
                        </ForwardRef>,
                        <ForwardRef
                          data-test-id="login-button"
                          disabled={true}
                          id="login"
                        >
                          Submit
                        </ForwardRef>,
                        <ForwardRef
                          onClick={[Function]}
                        >
                          Forgot Password?
                        </ForwardRef>,
                      ],
                      "name": "form",
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Incorrect Email Address or Password.",
                          "show": false,
                          "style": Object {
                            "fontWeight": "bold",
                            "marginBottom": "0px",
                            "marginTop": "0px",
                          },
                          "type": "alert-danger",
                        },
                        "ref": null,
                        "rendered": "Incorrect Email Address or Password.",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cvbbAY",
                            "isStatic": false,
                            "rules": Array [
                              "
  color: ",
                              [Function],
                              "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-cvbbAY",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Email Address",
                          "htmlFor": "email",
                        },
                        "ref": null,
                        "rendered": "Email Address",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kgoBCf",
                            "isStatic": false,
                            "rules": Array [
                              "
  display: ",
                              [Function],
                              ";
  color: ",
                              [Function],
                              ";
  font-size: ",
                              [Function],
                              ";
  font-weight: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.label",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kgoBCf",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "autoComplete": "new-email",
                          "data-test-id": "email-input",
                          "id": "email",
                          "inValid": false,
                          "name": "email",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "type": "text",
                          "valid": false,
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jWBwVP",
                            "isStatic": false,
                            "rules": Array [
                              "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                              [Function],
                              ";
  background-image: ",
                              [Function],
                              ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                              [Function],
                              ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                              [Function],
                              ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                              [Function],
                              ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                              "#999999",
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jWBwVP",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "A valid Email is required",
                          "show": undefined,
                          "type": "alert-danger",
                        },
                        "ref": null,
                        "rendered": "A valid Email is required",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cvbbAY",
                            "isStatic": false,
                            "rules": Array [
                              "
  color: ",
                              [Function],
                              "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-cvbbAY",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": Array [
                            <ForwardRef
                              htmlFor="password"
                            >
                              Password
                            </ForwardRef>,
                            <ForwardRef
                              autoComplete="new-password"
                              data-test-id="password-input"
                              id="password"
                              inValid={false}
                              name="password"
                              onBlur={[Function]}
                              onChange={[Function]}
                              type="password"
                              valid=""
                              value=""
                            />,
                            <ForwardRef
                              type="alert-danger"
                            >
                              Password is required
                            </ForwardRef>,
                          ],
                          "show": true,
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "Password",
                              "htmlFor": "password",
                            },
                            "ref": null,
                            "rendered": "Password",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-kgoBCf",
                                "isStatic": false,
                                "rules": Array [
                                  "
  display: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  font-weight: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.label",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-kgoBCf",
                              "target": "label",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "autoComplete": "new-password",
                              "data-test-id": "password-input",
                              "id": "password",
                              "inValid": false,
                              "name": "password",
                              "onBlur": [Function],
                              "onChange": [Function],
                              "type": "password",
                              "valid": "",
                              "value": "",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jWBwVP",
                                "isStatic": false,
                                "rules": Array [
                                  "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                                  [Function],
                                  ";
  background-image: ",
                                  [Function],
                                  ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                                  [Function],
                                  ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                                  [Function],
                                  ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                                  [Function],
                                  ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                                  "#999999",
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jWBwVP",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "Password is required",
                              "show": undefined,
                              "type": "alert-danger",
                            },
                            "ref": null,
                            "rendered": "Password is required",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-cvbbAY",
                                "isStatic": false,
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-cvbbAY",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                        ],
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-lkqHmb",
                            "isStatic": false,
                            "rules": Array [
                              "
  display: ",
                              [Function],
                              ";
  margin: 0;
  padding: 0;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-lkqHmb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Submit",
                          "data-test-id": "login-button",
                          "disabled": true,
                          "id": "login",
                        },
                        "ref": null,
                        "rendered": "Submit",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "rules": Array [
                              "
  display: ",
                              [Function],
                              ";
  color: ",
                              [Function],
                              ";
  font-size: ",
                              [Function],
                              ";
  font-weight: 200;
  width: ",
                              [Function],
                              ";
  margin: 0;
  margin-top: ",
                              [Function],
                              ";
  margin-bottom: ",
                              [Function],
                              ";
  margin-right: ",
                              [Function],
                              ";
  padding: ",
                              [Function],
                              ";
  padding-top: ",
                              [Function],
                              ";
  padding-bottom: ",
                              [Function],
                              ";
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                              [Function],
                              ";
  background-color: ",
                              [Function],
                              ";
  &:hover {
    cursor: ",
                              [Function],
                              ";
    color: ",
                              [Function],
                              ";
    background-color: ",
                              [Function],
                              ";
    border-color: ",
                              [Function],
                              ";
  }

  &::before {
    content: '",
                              [Function],
                              "';
  }
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Forgot Password?",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "rendered": "Forgot Password?",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-eLExRp",
                            "isStatic": false,
                            "rules": Array [
                              "
  cursor: pointer;
  color: ",
                              [Function],
                              ";
  font-size: ",
                              [Function],
                              ";
  font-weight: ",
                              [Function],
                              ";
  &:hover {
    color: ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-eLExRp",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": "form",
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eXEjpC",
                    "isStatic": false,
                    "rules": Array [
                      "
  max-width: ",
                      [Function],
                      ";
  margin: auto;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eXEjpC",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ksYbfQ",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ksYbfQ",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kEYyzF",
                "isStatic": false,
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  height: ",
                  [Function],
                  ";
  width: ",
                  [Function],
                  ";
  align-self: ",
                  [Function],
                  ";
  margin: ",
                  [Function],
                  ";
  padding: ",
                  [Function],
                  ";
",
                ],
              },
              "defaultProps": Object {
                "flex": 1,
              },
              "displayName": "FlexItem",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kEYyzF",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "If you do not already have an account please contact",
                " ",
                <ForwardRef
                  href="mailto:info@eventdynamic.com"
                >
                  info@eventdynamic.com
                </ForwardRef>,
                " ",
                "to begin setting up an account for your organization.",
              ],
            },
            "ref": null,
            "rendered": Array [
              "If you do not already have an account please contact",
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "info@eventdynamic.com",
                  "href": "mailto:info@eventdynamic.com",
                },
                "ref": null,
                "rendered": "info@eventdynamic.com",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jlyJG",
                    "isStatic": true,
                    "rules": Array [
                      "
  font-size: 10px;
  font-weight: bold;
  font-family: 'Roboto';
  line-height: 130%;
  color: ",
                      "#070707",
                      ";
  cursor: pointer;
  text-decoration: none;
",
                    ],
                  },
                  "displayName": "styled.a",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-jlyJG",
                  "target": "a",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              " ",
              "to begin setting up an account for your organization.",
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-krvtoX",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 40px;
  background-color: ",
                  "#F2F2F2",
                  ";
  font-size: 10px;
  line-height: 130%;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-krvtoX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-cbkKFq",
            "isStatic": true,
            "rules": Array [
              "
  height: 100%;
  display: flex;
  flex-direction: column;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-cbkKFq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<LoginPresenter /> renders correctly as login form when forgot=false 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginPresenter
    authActions={
      Object {
        "forgotPass": [MockFunction],
        "signIn": [MockFunction],
      }
    }
    authState={
      Object {
        "model": null,
        "pending": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <ForwardRef>
        <ForwardRef
          flex={1}
        >
          <ForwardRef
            padding="20% 40px 40px"
          >
            <ForwardRef
              maxWidth="400px"
            >
              <ForwardRef
                alt="Event Dynamic Logo"
                src="eventdynamiclogo.svg"
              />
              <ForwardRef
                style={
                  Object {
                    "marginBottom": "5px",
                  }
                }
              >
                Log In
              </ForwardRef>
              <form
                name="form"
                onSubmit={[Function]}
              >
                <ForwardRef
                  show={false}
                  style={
                    Object {
                      "fontWeight": "bold",
                      "marginBottom": "0px",
                      "marginTop": "0px",
                    }
                  }
                  type="alert-danger"
                >
                  Incorrect Email Address or Password.
                </ForwardRef>
                <ForwardRef
                  htmlFor="email"
                >
                  Email Address
                </ForwardRef>
                <ForwardRef
                  autoComplete="new-email"
                  data-test-id="email-input"
                  id="email"
                  inValid={false}
                  name="email"
                  onBlur={[Function]}
                  onChange={[Function]}
                  type="text"
                  valid={false}
                  value=""
                />
                <ForwardRef
                  type="alert-danger"
                >
                  A valid Email is required
                </ForwardRef>
                <ForwardRef
                  show={true}
                >
                  <ForwardRef
                    htmlFor="password"
                  >
                    Password
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-password"
                    data-test-id="password-input"
                    id="password"
                    inValid={false}
                    name="password"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="password"
                    valid=""
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    Password is required
                  </ForwardRef>
                </ForwardRef>
                <ForwardRef
                  data-test-id="login-button"
                  disabled={true}
                  id="login"
                >
                  Submit
                </ForwardRef>
                <ForwardRef
                  onClick={[Function]}
                >
                  Forgot Password?
                </ForwardRef>
              </form>
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>
        <ForwardRef>
          If you do not already have an account please contact
           
          <ForwardRef
            href="mailto:info@eventdynamic.com"
          >
            info@eventdynamic.com
          </ForwardRef>
           
          to begin setting up an account for your organization.
        </ForwardRef>
      </ForwardRef>,
      "imageSrc": "url(stadiumseats.jpg)",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            flex={1}
          >
            <ForwardRef
              padding="20% 40px 40px"
            >
              <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef>
            If you do not already have an account please contact
             
            <ForwardRef
              href="mailto:info@eventdynamic.com"
            >
              info@eventdynamic.com
            </ForwardRef>
             
            to begin setting up an account for your organization.
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef
              padding="20% 40px 40px"
            >
              <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>
            </ForwardRef>,
            "flex": 1,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>,
              "padding": "20% 40px 40px",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />,
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>,
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>,
                ],
                "maxWidth": "400px",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alt": "Event Dynamic Logo",
                    "src": "eventdynamiclogo.svg",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fYiAbW",
                      "isStatic": true,
                      "rules": Array [
                        "
  display: block;
  margin: auto;
  padding: 40px;
  paddingtop: 10px;
  width: 40%;
",
                      ],
                    },
                    "displayName": "styled.img",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-fYiAbW",
                    "target": "img",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Log In",
                    "style": Object {
                      "marginBottom": "5px",
                    },
                  },
                  "ref": null,
                  "rendered": "Log In",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [
                      [Function],
                    ],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": false,
                      "rules": Array [
                        "
  color: ",
                        [Function],
                        "
  font-size: ",
                        [Function],
                        ";
  font-weight: ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.h3",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "h3",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <ForwardRef
                        show={false}
                        style={
                          Object {
                            "fontWeight": "bold",
                            "marginBottom": "0px",
                            "marginTop": "0px",
                          }
                        }
                        type="alert-danger"
                      >
                        Incorrect Email Address or Password.
                      </ForwardRef>,
                      <ForwardRef
                        htmlFor="email"
                      >
                        Email Address
                      </ForwardRef>,
                      <ForwardRef
                        autoComplete="new-email"
                        data-test-id="email-input"
                        id="email"
                        inValid={false}
                        name="email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="text"
                        valid={false}
                        value=""
                      />,
                      <ForwardRef
                        type="alert-danger"
                      >
                        A valid Email is required
                      </ForwardRef>,
                      <ForwardRef
                        show={true}
                      >
                        <ForwardRef
                          htmlFor="password"
                        >
                          Password
                        </ForwardRef>
                        <ForwardRef
                          autoComplete="new-password"
                          data-test-id="password-input"
                          id="password"
                          inValid={false}
                          name="password"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="password"
                          valid=""
                          value=""
                        />
                        <ForwardRef
                          type="alert-danger"
                        >
                          Password is required
                        </ForwardRef>
                      </ForwardRef>,
                      <ForwardRef
                        data-test-id="login-button"
                        disabled={true}
                        id="login"
                      >
                        Submit
                      </ForwardRef>,
                      <ForwardRef
                        onClick={[Function]}
                      >
                        Forgot Password?
                      </ForwardRef>,
                    ],
                    "name": "form",
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Incorrect Email Address or Password.",
                        "show": false,
                        "style": Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        },
                        "type": "alert-danger",
                      },
                      "ref": null,
                      "rendered": "Incorrect Email Address or Password.",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cvbbAY",
                          "isStatic": false,
                          "rules": Array [
                            "
  color: ",
                            [Function],
                            "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-cvbbAY",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Email Address",
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "rendered": "Email Address",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kgoBCf",
                          "isStatic": false,
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  color: ",
                            [Function],
                            ";
  font-size: ",
                            [Function],
                            ";
  font-weight: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kgoBCf",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "autoComplete": "new-email",
                        "data-test-id": "email-input",
                        "id": "email",
                        "inValid": false,
                        "name": "email",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "type": "text",
                        "valid": false,
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jWBwVP",
                          "isStatic": false,
                          "rules": Array [
                            "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                            [Function],
                            ";
  background-image: ",
                            [Function],
                            ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                            [Function],
                            ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                            [Function],
                            ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                            [Function],
                            ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                            "#999999",
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jWBwVP",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "A valid Email is required",
                        "show": undefined,
                        "type": "alert-danger",
                      },
                      "ref": null,
                      "rendered": "A valid Email is required",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cvbbAY",
                          "isStatic": false,
                          "rules": Array [
                            "
  color: ",
                            [Function],
                            "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-cvbbAY",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": Array [
                          <ForwardRef
                            htmlFor="password"
                          >
                            Password
                          </ForwardRef>,
                          <ForwardRef
                            autoComplete="new-password"
                            data-test-id="password-input"
                            id="password"
                            inValid={false}
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="password"
                            valid=""
                            value=""
                          />,
                          <ForwardRef
                            type="alert-danger"
                          >
                            Password is required
                          </ForwardRef>,
                        ],
                        "show": true,
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "children": "Password",
                            "htmlFor": "password",
                          },
                          "ref": null,
                          "rendered": "Password",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-kgoBCf",
                              "isStatic": false,
                              "rules": Array [
                                "
  display: ",
                                [Function],
                                ";
  color: ",
                                [Function],
                                ";
  font-size: ",
                                [Function],
                                ";
  font-weight: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "styled.label",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-kgoBCf",
                            "target": "label",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "autoComplete": "new-password",
                            "data-test-id": "password-input",
                            "id": "password",
                            "inValid": false,
                            "name": "password",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "type": "password",
                            "valid": "",
                            "value": "",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              [Function],
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-jWBwVP",
                              "isStatic": false,
                              "rules": Array [
                                "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                                [Function],
                                ";
  background-image: ",
                                [Function],
                                ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                                [Function],
                                ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                                [Function],
                                ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                                [Function],
                                ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                                "#999999",
                                ";
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-jWBwVP",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "children": "Password is required",
                            "show": undefined,
                            "type": "alert-danger",
                          },
                          "ref": null,
                          "rendered": "Password is required",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              [Function],
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "rules": Array [
                                "
  color: ",
                                [Function],
                                "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                        },
                      ],
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-lkqHmb",
                          "isStatic": false,
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  margin: 0;
  padding: 0;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-lkqHmb",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Submit",
                        "data-test-id": "login-button",
                        "disabled": true,
                        "id": "login",
                      },
                      "ref": null,
                      "rendered": "Submit",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  color: ",
                            [Function],
                            ";
  font-size: ",
                            [Function],
                            ";
  font-weight: 200;
  width: ",
                            [Function],
                            ";
  margin: 0;
  margin-top: ",
                            [Function],
                            ";
  margin-bottom: ",
                            [Function],
                            ";
  margin-right: ",
                            [Function],
                            ";
  padding: ",
                            [Function],
                            ";
  padding-top: ",
                            [Function],
                            ";
  padding-bottom: ",
                            [Function],
                            ";
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                            [Function],
                            ";
  background-color: ",
                            [Function],
                            ";
  &:hover {
    cursor: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    background-color: ",
                            [Function],
                            ";
    border-color: ",
                            [Function],
                            ";
  }

  &::before {
    content: '",
                            [Function],
                            "';
  }
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Forgot Password?",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": "Forgot Password?",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eLExRp",
                          "isStatic": false,
                          "rules": Array [
                            "
  cursor: pointer;
  color: ",
                            [Function],
                            ";
  font-size: ",
                            [Function],
                            ";
  font-weight: ",
                            [Function],
                            ";
  &:hover {
    color: ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-eLExRp",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": "form",
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-eXEjpC",
                  "isStatic": false,
                  "rules": Array [
                    "
  max-width: ",
                    [Function],
                    ";
  margin: auto;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-eXEjpC",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ksYbfQ",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ksYbfQ",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kEYyzF",
              "isStatic": false,
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  height: ",
                [Function],
                ";
  width: ",
                [Function],
                ";
  align-self: ",
                [Function],
                ";
  margin: ",
                [Function],
                ";
  padding: ",
                [Function],
                ";
",
              ],
            },
            "defaultProps": Object {
              "flex": 1,
            },
            "displayName": "FlexItem",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kEYyzF",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "If you do not already have an account please contact",
              " ",
              <ForwardRef
                href="mailto:info@eventdynamic.com"
              >
                info@eventdynamic.com
              </ForwardRef>,
              " ",
              "to begin setting up an account for your organization.",
            ],
          },
          "ref": null,
          "rendered": Array [
            "If you do not already have an account please contact",
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "info@eventdynamic.com",
                "href": "mailto:info@eventdynamic.com",
              },
              "ref": null,
              "rendered": "info@eventdynamic.com",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jlyJG",
                  "isStatic": true,
                  "rules": Array [
                    "
  font-size: 10px;
  font-weight: bold;
  font-family: 'Roboto';
  line-height: 130%;
  color: ",
                    "#070707",
                    ";
  cursor: pointer;
  text-decoration: none;
",
                  ],
                },
                "displayName": "styled.a",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jlyJG",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            " ",
            "to begin setting up an account for your organization.",
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-krvtoX",
              "isStatic": true,
              "rules": Array [
                "
  padding: 40px;
  background-color: ",
                "#F2F2F2",
                ";
  font-size: 10px;
  line-height: 130%;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-krvtoX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-cbkKFq",
          "isStatic": true,
          "rules": Array [
            "
  height: 100%;
  display: flex;
  flex-direction: column;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-cbkKFq",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef>
          <ForwardRef
            flex={1}
          >
            <ForwardRef
              padding="20% 40px 40px"
            >
              <ForwardRef
                maxWidth="400px"
              >
                <ForwardRef
                  alt="Event Dynamic Logo"
                  src="eventdynamiclogo.svg"
                />
                <ForwardRef
                  style={
                    Object {
                      "marginBottom": "5px",
                    }
                  }
                >
                  Log In
                </ForwardRef>
                <form
                  name="form"
                  onSubmit={[Function]}
                >
                  <ForwardRef
                    show={false}
                    style={
                      Object {
                        "fontWeight": "bold",
                        "marginBottom": "0px",
                        "marginTop": "0px",
                      }
                    }
                    type="alert-danger"
                  >
                    Incorrect Email Address or Password.
                  </ForwardRef>
                  <ForwardRef
                    htmlFor="email"
                  >
                    Email Address
                  </ForwardRef>
                  <ForwardRef
                    autoComplete="new-email"
                    data-test-id="email-input"
                    id="email"
                    inValid={false}
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="text"
                    valid={false}
                    value=""
                  />
                  <ForwardRef
                    type="alert-danger"
                  >
                    A valid Email is required
                  </ForwardRef>
                  <ForwardRef
                    show={true}
                  >
                    <ForwardRef
                      htmlFor="password"
                    >
                      Password
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-password"
                      data-test-id="password-input"
                      id="password"
                      inValid={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      valid=""
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      Password is required
                    </ForwardRef>
                  </ForwardRef>
                  <ForwardRef
                    data-test-id="login-button"
                    disabled={true}
                    id="login"
                  >
                    Submit
                  </ForwardRef>
                  <ForwardRef
                    onClick={[Function]}
                  >
                    Forgot Password?
                  </ForwardRef>
                </form>
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>
          <ForwardRef>
            If you do not already have an account please contact
             
            <ForwardRef
              href="mailto:info@eventdynamic.com"
            >
              info@eventdynamic.com
            </ForwardRef>
             
            to begin setting up an account for your organization.
          </ForwardRef>
        </ForwardRef>,
        "imageSrc": "url(stadiumseats.jpg)",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              flex={1}
            >
              <ForwardRef
                padding="20% 40px 40px"
              >
                <ForwardRef
                  maxWidth="400px"
                >
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef>
              If you do not already have an account please contact
               
              <ForwardRef
                href="mailto:info@eventdynamic.com"
              >
                info@eventdynamic.com
              </ForwardRef>
               
              to begin setting up an account for your organization.
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef
                padding="20% 40px 40px"
              >
                <ForwardRef
                  maxWidth="400px"
                >
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>
                </ForwardRef>
              </ForwardRef>,
              "flex": 1,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef
                  maxWidth="400px"
                >
                  <ForwardRef
                    alt="Event Dynamic Logo"
                    src="eventdynamiclogo.svg"
                  />
                  <ForwardRef
                    style={
                      Object {
                        "marginBottom": "5px",
                      }
                    }
                  >
                    Log In
                  </ForwardRef>
                  <form
                    name="form"
                    onSubmit={[Function]}
                  >
                    <ForwardRef
                      show={false}
                      style={
                        Object {
                          "fontWeight": "bold",
                          "marginBottom": "0px",
                          "marginTop": "0px",
                        }
                      }
                      type="alert-danger"
                    >
                      Incorrect Email Address or Password.
                    </ForwardRef>
                    <ForwardRef
                      htmlFor="email"
                    >
                      Email Address
                    </ForwardRef>
                    <ForwardRef
                      autoComplete="new-email"
                      data-test-id="email-input"
                      id="email"
                      inValid={false}
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="text"
                      valid={false}
                      value=""
                    />
                    <ForwardRef
                      type="alert-danger"
                    >
                      A valid Email is required
                    </ForwardRef>
                    <ForwardRef
                      show={true}
                    >
                      <ForwardRef
                        htmlFor="password"
                      >
                        Password
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-password"
                        data-test-id="password-input"
                        id="password"
                        inValid={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        valid=""
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        Password is required
                      </ForwardRef>
                    </ForwardRef>
                    <ForwardRef
                      data-test-id="login-button"
                      disabled={true}
                      id="login"
                    >
                      Submit
                    </ForwardRef>
                    <ForwardRef
                      onClick={[Function]}
                    >
                      Forgot Password?
                    </ForwardRef>
                  </form>
                </ForwardRef>,
                "padding": "20% 40px 40px",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      alt="Event Dynamic Logo"
                      src="eventdynamiclogo.svg"
                    />,
                    <ForwardRef
                      style={
                        Object {
                          "marginBottom": "5px",
                        }
                      }
                    >
                      Log In
                    </ForwardRef>,
                    <form
                      name="form"
                      onSubmit={[Function]}
                    >
                      <ForwardRef
                        show={false}
                        style={
                          Object {
                            "fontWeight": "bold",
                            "marginBottom": "0px",
                            "marginTop": "0px",
                          }
                        }
                        type="alert-danger"
                      >
                        Incorrect Email Address or Password.
                      </ForwardRef>
                      <ForwardRef
                        htmlFor="email"
                      >
                        Email Address
                      </ForwardRef>
                      <ForwardRef
                        autoComplete="new-email"
                        data-test-id="email-input"
                        id="email"
                        inValid={false}
                        name="email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="text"
                        valid={false}
                        value=""
                      />
                      <ForwardRef
                        type="alert-danger"
                      >
                        A valid Email is required
                      </ForwardRef>
                      <ForwardRef
                        show={true}
                      >
                        <ForwardRef
                          htmlFor="password"
                        >
                          Password
                        </ForwardRef>
                        <ForwardRef
                          autoComplete="new-password"
                          data-test-id="password-input"
                          id="password"
                          inValid={false}
                          name="password"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="password"
                          valid=""
                          value=""
                        />
                        <ForwardRef
                          type="alert-danger"
                        >
                          Password is required
                        </ForwardRef>
                      </ForwardRef>
                      <ForwardRef
                        data-test-id="login-button"
                        disabled={true}
                        id="login"
                      >
                        Submit
                      </ForwardRef>
                      <ForwardRef
                        onClick={[Function]}
                      >
                        Forgot Password?
                      </ForwardRef>
                    </form>,
                  ],
                  "maxWidth": "400px",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "alt": "Event Dynamic Logo",
                      "src": "eventdynamiclogo.svg",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-fYiAbW",
                        "isStatic": true,
                        "rules": Array [
                          "
  display: block;
  margin: auto;
  padding: 40px;
  paddingtop: 10px;
  width: 40%;
",
                        ],
                      },
                      "displayName": "styled.img",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-fYiAbW",
                      "target": "img",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Log In",
                      "style": Object {
                        "marginBottom": "5px",
                      },
                    },
                    "ref": null,
                    "rendered": "Log In",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [
                        [Function],
                      ],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jTzLTM",
                        "isStatic": false,
                        "rules": Array [
                          "
  color: ",
                          [Function],
                          "
  font-size: ",
                          [Function],
                          ";
  font-weight: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.h3",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-jTzLTM",
                      "target": "h3",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <ForwardRef
                          show={false}
                          style={
                            Object {
                              "fontWeight": "bold",
                              "marginBottom": "0px",
                              "marginTop": "0px",
                            }
                          }
                          type="alert-danger"
                        >
                          Incorrect Email Address or Password.
                        </ForwardRef>,
                        <ForwardRef
                          htmlFor="email"
                        >
                          Email Address
                        </ForwardRef>,
                        <ForwardRef
                          autoComplete="new-email"
                          data-test-id="email-input"
                          id="email"
                          inValid={false}
                          name="email"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="text"
                          valid={false}
                          value=""
                        />,
                        <ForwardRef
                          type="alert-danger"
                        >
                          A valid Email is required
                        </ForwardRef>,
                        <ForwardRef
                          show={true}
                        >
                          <ForwardRef
                            htmlFor="password"
                          >
                            Password
                          </ForwardRef>
                          <ForwardRef
                            autoComplete="new-password"
                            data-test-id="password-input"
                            id="password"
                            inValid={false}
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="password"
                            valid=""
                            value=""
                          />
                          <ForwardRef
                            type="alert-danger"
                          >
                            Password is required
                          </ForwardRef>
                        </ForwardRef>,
                        <ForwardRef
                          data-test-id="login-button"
                          disabled={true}
                          id="login"
                        >
                          Submit
                        </ForwardRef>,
                        <ForwardRef
                          onClick={[Function]}
                        >
                          Forgot Password?
                        </ForwardRef>,
                      ],
                      "name": "form",
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Incorrect Email Address or Password.",
                          "show": false,
                          "style": Object {
                            "fontWeight": "bold",
                            "marginBottom": "0px",
                            "marginTop": "0px",
                          },
                          "type": "alert-danger",
                        },
                        "ref": null,
                        "rendered": "Incorrect Email Address or Password.",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cvbbAY",
                            "isStatic": false,
                            "rules": Array [
                              "
  color: ",
                              [Function],
                              "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-cvbbAY",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Email Address",
                          "htmlFor": "email",
                        },
                        "ref": null,
                        "rendered": "Email Address",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kgoBCf",
                            "isStatic": false,
                            "rules": Array [
                              "
  display: ",
                              [Function],
                              ";
  color: ",
                              [Function],
                              ";
  font-size: ",
                              [Function],
                              ";
  font-weight: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.label",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kgoBCf",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "autoComplete": "new-email",
                          "data-test-id": "email-input",
                          "id": "email",
                          "inValid": false,
                          "name": "email",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "type": "text",
                          "valid": false,
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jWBwVP",
                            "isStatic": false,
                            "rules": Array [
                              "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                              [Function],
                              ";
  background-image: ",
                              [Function],
                              ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                              [Function],
                              ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                              [Function],
                              ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                              [Function],
                              ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                              "#999999",
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jWBwVP",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "A valid Email is required",
                          "show": undefined,
                          "type": "alert-danger",
                        },
                        "ref": null,
                        "rendered": "A valid Email is required",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cvbbAY",
                            "isStatic": false,
                            "rules": Array [
                              "
  color: ",
                              [Function],
                              "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-cvbbAY",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": Array [
                            <ForwardRef
                              htmlFor="password"
                            >
                              Password
                            </ForwardRef>,
                            <ForwardRef
                              autoComplete="new-password"
                              data-test-id="password-input"
                              id="password"
                              inValid={false}
                              name="password"
                              onBlur={[Function]}
                              onChange={[Function]}
                              type="password"
                              valid=""
                              value=""
                            />,
                            <ForwardRef
                              type="alert-danger"
                            >
                              Password is required
                            </ForwardRef>,
                          ],
                          "show": true,
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "Password",
                              "htmlFor": "password",
                            },
                            "ref": null,
                            "rendered": "Password",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-kgoBCf",
                                "isStatic": false,
                                "rules": Array [
                                  "
  display: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  font-weight: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.label",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-kgoBCf",
                              "target": "label",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "autoComplete": "new-password",
                              "data-test-id": "password-input",
                              "id": "password",
                              "inValid": false,
                              "name": "password",
                              "onBlur": [Function],
                              "onChange": [Function],
                              "type": "password",
                              "valid": "",
                              "value": "",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jWBwVP",
                                "isStatic": false,
                                "rules": Array [
                                  "
  box-sizing: border-box;
  display: block;
  margin-top: 10px;
  margin-bottom: 5px;
  background: ",
                                  [Function],
                                  ";
  background-image: ",
                                  [Function],
                                  ";
  background-repeat: no-repeat;
  background-position: right center;
  &:-webkit-autofill,
  -webkit-autofill:hover,
  -webkit-autofill:focus {
    -webkit-animation-name: ",
                                  [Function],
                                  ";
    -webkit-animation-fill-mode: both;
  }
  font-size: 1rem;
  width: ",
                                  [Function],
                                  ";
  padding-left: 3%;
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                                  [Function],
                                  ";
  padding-top: 0.9em;
  padding-bottom: 0.9em;

  ::placeholder {
    color: ",
                                  "#999999",
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jWBwVP",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "Password is required",
                              "show": undefined,
                              "type": "alert-danger",
                            },
                            "ref": null,
                            "rendered": "Password is required",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-cvbbAY",
                                "isStatic": false,
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  "
  font-size: 0.9em;
  font-weight: 200;
  width: 100%;
  height: 16px;
  margin: 0;
  margin-top: 0;
  margin-bottom: 15px;
  padding: 0;
  visibility: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-cvbbAY",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            },
                          },
                        ],
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-lkqHmb",
                            "isStatic": false,
                            "rules": Array [
                              "
  display: ",
                              [Function],
                              ";
  margin: 0;
  padding: 0;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-lkqHmb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Submit",
                          "data-test-id": "login-button",
                          "disabled": true,
                          "id": "login",
                        },
                        "ref": null,
                        "rendered": "Submit",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [
                            [Function],
                          ],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "rules": Array [
                              "
  display: ",
                              [Function],
                              ";
  color: ",
                              [Function],
                              ";
  font-size: ",
                              [Function],
                              ";
  font-weight: 200;
  width: ",
                              [Function],
                              ";
  margin: 0;
  margin-top: ",
                              [Function],
                              ";
  margin-bottom: ",
                              [Function],
                              ";
  margin-right: ",
                              [Function],
                              ";
  padding: ",
                              [Function],
                              ";
  padding-top: ",
                              [Function],
                              ";
  padding-bottom: ",
                              [Function],
                              ";
  border: 2px solid;
  border-radius: 3px;
  border-color: ",
                              [Function],
                              ";
  background-color: ",
                              [Function],
                              ";
  &:hover {
    cursor: ",
                              [Function],
                              ";
    color: ",
                              [Function],
                              ";
    background-color: ",
                              [Function],
                              ";
    border-color: ",
                              [Function],
                              ";
  }

  &::before {
    content: '",
                              [Function],
                              "';
  }
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Forgot Password?",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "rendered": "Forgot Password?",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-eLExRp",
                            "isStatic": false,
                            "rules": Array [
                              "
  cursor: pointer;
  color: ",
                              [Function],
                              ";
  font-size: ",
                              [Function],
                              ";
  font-weight: ",
                              [Function],
                              ";
  &:hover {
    color: ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-eLExRp",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": "form",
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eXEjpC",
                    "isStatic": false,
                    "rules": Array [
                      "
  max-width: ",
                      [Function],
                      ";
  margin: auto;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eXEjpC",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ksYbfQ",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ksYbfQ",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kEYyzF",
                "isStatic": false,
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  height: ",
                  [Function],
                  ";
  width: ",
                  [Function],
                  ";
  align-self: ",
                  [Function],
                  ";
  margin: ",
                  [Function],
                  ";
  padding: ",
                  [Function],
                  ";
",
                ],
              },
              "defaultProps": Object {
                "flex": 1,
              },
              "displayName": "FlexItem",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kEYyzF",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "If you do not already have an account please contact",
                " ",
                <ForwardRef
                  href="mailto:info@eventdynamic.com"
                >
                  info@eventdynamic.com
                </ForwardRef>,
                " ",
                "to begin setting up an account for your organization.",
              ],
            },
            "ref": null,
            "rendered": Array [
              "If you do not already have an account please contact",
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "info@eventdynamic.com",
                  "href": "mailto:info@eventdynamic.com",
                },
                "ref": null,
                "rendered": "info@eventdynamic.com",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jlyJG",
                    "isStatic": true,
                    "rules": Array [
                      "
  font-size: 10px;
  font-weight: bold;
  font-family: 'Roboto';
  line-height: 130%;
  color: ",
                      "#070707",
                      ";
  cursor: pointer;
  text-decoration: none;
",
                    ],
                  },
                  "displayName": "styled.a",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-jlyJG",
                  "target": "a",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              " ",
              "to begin setting up an account for your organization.",
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-krvtoX",
                "isStatic": true,
                "rules": Array [
                  "
  padding: 40px;
  background-color: ",
                  "#F2F2F2",
                  ";
  font-size: 10px;
  line-height: 130%;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-krvtoX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-cbkKFq",
            "isStatic": true,
            "rules": Array [
              "
  height: 100%;
  display: flex;
  flex-direction: column;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-cbkKFq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
